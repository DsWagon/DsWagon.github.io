<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://dswagon.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://dswagon.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-08-30T14:04:01+00:00</updated><id>https://dswagon.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Flex &amp;amp; grid</title><link href="https://dswagon.github.io/code/2023/08/28/Flexbox.html" rel="alternate" type="text/html" title="Flex &amp;amp; grid"/><published>2023-08-28T00:00:00+00:00</published><updated>2023-08-28T00:00:00+00:00</updated><id>https://dswagon.github.io/code/2023/08/28/Flexbox</id><content type="html" xml:base="https://dswagon.github.io/code/2023/08/28/Flexbox.html"><![CDATA[<ul> <li>Flexbox is a layout mode of CSS3. It is designed for laying out items in a single dimension - either as a row or a column.</li> <li>Bootstrap‚Äôs grid system is built with flexbox and allows up to 12 columns across the page. It is fully responsive.</li> <li>Grid is a layout mode of CSS3. It is designed for laying out items in two dimensions - rows and columns. We will mainly use Bootstrap‚Äôs grid system.</li> </ul> <h1 id="properties">Properties</h1> <p>Properties of flexbox can be tested <a href="https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout/Flexbox_skills">here</a></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">css
</span><span class="nt">justify-content</span> <span class="nt">poss√®de</span> <span class="err">5</span> <span class="nt">valeurs</span> <span class="nt">possibles</span>
  <span class="nt">flex-start</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">s</span><span class="s2">'alignent au c√¥t√© gauche du conteneur.
  flex-end : Les √©l√©ments s'</span><span class="nt">alignent</span> <span class="nt">au</span> <span class="nt">c√¥t√©</span> <span class="nt">droit</span> <span class="nt">du</span> <span class="nt">conteneur</span><span class="o">.</span>
  <span class="nt">center</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">s</span><span class="s2">'alignent au centre du conteneur.
  space-between : Les √©l√©ments s'</span><span class="nt">affichent</span> <span class="nt">avec</span> <span class="nt">un</span> <span class="nt">espace</span> <span class="nt">√©gal</span> <span class="nt">entre</span> <span class="nt">eux</span><span class="o">.</span>
  <span class="nt">space-around</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">s</span><span class="s2">'affichent avec un espacement √©gal √† l'</span><span class="nt">entour</span> <span class="nt">d</span><span class="s2">'eux.

align-items poss√®de 5 valeurs possibles
  stretch : Les √©l√©ments sont √©tir√©s pour s'</span><span class="nt">adapter</span> <span class="nt">au</span> <span class="nt">conteneur</span><span class="o">.</span>
  <span class="nt">flex-start</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">s</span><span class="s2">'alignent au c√¥t√© haut du conteneur.
  flex-end : Les √©l√©ments s'</span><span class="nt">alignent</span> <span class="nt">au</span> <span class="nt">c√¥t√©</span> <span class="nt">bas</span> <span class="nt">du</span> <span class="nt">conteneur</span><span class="o">.</span>
  <span class="nt">center</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">s</span><span class="s2">'alignent au centre du conteneur.
  baseline : Les √©l√©ments s'</span><span class="nt">alignent</span> <span class="nt">sur</span> <span class="nt">leur</span> <span class="nt">ligne</span> <span class="nt">de</span> <span class="nt">base</span><span class="o">.</span>

<span class="nt">flex-direction</span> <span class="nt">poss√®de</span> <span class="err">4</span> <span class="nt">valeurs</span> <span class="nt">possibles</span>
  <span class="nt">row</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">sont</span> <span class="nt">dispos√©s</span> <span class="nt">horizontalement</span><span class="o">.</span>
  <span class="nt">row-reverse</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">sont</span> <span class="nt">dispos√©s</span> <span class="nt">horizontalement</span> <span class="nt">en</span> <span class="nt">sens</span> <span class="nt">inverse</span><span class="o">.</span>
  <span class="nt">column</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">sont</span> <span class="nt">dispos√©s</span> <span class="nt">verticalement</span><span class="o">.</span>
  <span class="nt">column-reverse</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">sont</span> <span class="nt">dispos√©s</span> <span class="nt">verticalement</span> <span class="nt">en</span> <span class="nt">sens</span> <span class="nt">inverse</span><span class="o">.</span>

<span class="nt">flex-wrap</span> <span class="nt">poss√®de</span> <span class="err">3</span> <span class="nt">valeurs</span> <span class="nt">possibles</span>
  <span class="nt">nowrap</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">sont</span> <span class="nt">dispos√©s</span> <span class="nt">sur</span> <span class="nt">une</span> <span class="nt">seule</span> <span class="nt">ligne</span><span class="o">.</span>
  <span class="nt">wrap</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">sont</span> <span class="nt">dispos√©s</span> <span class="nt">sur</span> <span class="nt">plusieurs</span> <span class="nt">lignes</span><span class="o">.</span>
  <span class="nt">wrap-reverse</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">sont</span> <span class="nt">dispos√©s</span> <span class="nt">sur</span> <span class="nt">plusieurs</span> <span class="nt">lignes</span> <span class="nt">en</span> <span class="nt">sens</span> <span class="nt">inverse</span><span class="o">.</span>

<span class="nt">flex-grow</span> <span class="nt">poss√®de</span> <span class="err">2</span> <span class="nt">valeurs</span> <span class="nt">possibles</span>
  <span class="err">0</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">ne</span> <span class="nt">sont</span> <span class="nt">pas</span> <span class="nt">√©tir√©s</span> <span class="nt">pour</span> <span class="nt">s</span><span class="s2">'adapter au conteneur.
  1 : Les √©l√©ments sont √©tir√©s pour s'</span><span class="nt">adapter</span> <span class="nt">au</span> <span class="nt">conteneur</span><span class="o">.</span>

<span class="nt">flex-shrink</span> <span class="nt">poss√®de</span> <span class="err">2</span> <span class="nt">valeurs</span> <span class="nt">possibles</span>
  <span class="err">0</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">ne</span> <span class="nt">sont</span> <span class="nt">pas</span> <span class="nt">r√©duits</span> <span class="nt">pour</span> <span class="nt">s</span><span class="s2">'adapter au conteneur.
  1 : Les √©l√©ments sont r√©duits pour s'</span><span class="nt">adapter</span> <span class="nt">au</span> <span class="nt">conteneur</span><span class="o">.</span>

<span class="nt">flex-basis</span> <span class="nt">poss√®de</span> <span class="err">2</span> <span class="nt">valeurs</span> <span class="nt">possibles</span>
  <span class="nt">auto</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">sont</span> <span class="nt">dispos√©s</span> <span class="nt">selon</span> <span class="nt">leur</span> <span class="nt">taille</span> <span class="nt">par</span> <span class="nt">d√©faut</span><span class="o">.</span>
  <span class="err">0</span> <span class="o">:</span> <span class="nt">Les</span> <span class="nt">√©l√©ments</span> <span class="nt">sont</span> <span class="nt">dispos√©s</span> <span class="nt">selon</span> <span class="nt">la</span> <span class="nt">taille</span> <span class="nt">du</span> <span class="nt">conteneur</span><span class="o">.</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="bootstrap-responsive">Bootstrap Responsive</h1> <p>Bootstrap‚Äôs grid system is built with flexbox and allows up to 12 columns across the page. It is fully responsive.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">
</span>Responsive breakpoints
default: Extra small devices (Portrait phone üëâ less than 576px)
sm: Small devices (Landscape phone üëâ 576px and up)
md: Medium devices (Tablet üëâ 768px and up)
lg: Large devices (Desktops üëâ 992px and up)
xl: Extra large devices (Large desktops üëâ 1200px and up)
xxl: Extra extra large devices (Extra large desktops üëâ 1400px and up)
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="bootstrap-grid-1212">Bootstrap grid 12/12</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-12 col-sm-12 column"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Velit exercitationem eaque aperiam rem quia quibusdam dolor ducimus quo similique eos pariatur nostrum aliquam nam eius, doloremque quis voluptatum unde. Porro voluptates aspernatur voluptate ipsam, magni vero. Accusamus, iusto tempore id!<span class="nt">&lt;/p&gt;&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quae laboriosam, excepturi quas.<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="row"> <div class="col-lg-12 col-sm-12 column"> <div class="bootstrap-test"><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Velit exercitationem eaque aperiam rem quia quibusdam dolor ducimus quo similique eos pariatur nostrum aliquam nam eius, doloremque quis voluptatum unde. Porro voluptates aspernatur voluptate ipsam, magni vero. Accusamus, iusto tempore id!</p><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quae laboriosam, excepturi quas.</p> </div> </div> </div> <hr/> <h1 id="bootstrap-grid-444">Bootstrap grid 4/4/4</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-4 col-sm-4 column"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ea facilis vel aliquam aspernatur dolor placeat totam saepe perferendis. Odio quia vel sed eveniet cupiditate, illum doloremque sint veniam eum? Corporis?<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-4 col-sm-4 column"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Illo adipisci ipsa, consequuntur cum, sunt dolores veniam. Enim inventore in dolore deserunt vitae sequi nemo!<span class="nt">&lt;/p&gt;</span>
      <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-4 col-sm-4 column"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ea excepturi ducimus numquam aut error corporis aspernatur ipsum quos eius culpa!<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="row"> <div class="col-lg-4 col-sm-4 column"> <div class="bootstrap-test"><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ea facilis vel aliquam aspernatur dolor placeat totam saepe perferendis. Odio quia vel sed eveniet cupiditate, illum doloremque sint veniam eum? Corporis?</p> </div> </div> <div class="col-lg-4 col-sm-4 column"> <div class="bootstrap-test"><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Illo adipisci ipsa, consequuntur cum, sunt dolores veniam. Enim inventore in dolore deserunt vitae sequi nemo!</p> </div> </div> <div class="col-lg-4 col-sm-4 column"> <div class="bootstrap-test"><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ea excepturi ducimus numquam aut error corporis aspernatur ipsum quos eius culpa!</p> </div> </div> </div> <hr/> <h1 id="bootstrap-grid-86-64">Bootstrap grid 8(6-6)/4</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-8 col-sm-8 column"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Porro distinctio atque molestiae optio, consequuntur? Iusto ratione cumque dolor aut dolore!<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-6 col-sm-6 column"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;hr&gt;&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis facilis molestias voluptatum laudantium fuga ratione tempora rem dolor dicta rerum vero ut, suscipit ex qui amet quam vel cupiditate quaerat minus assumenda reiciendis, similique omnis delectus! Autem, repudiandae cumque eaque?<span class="nt">&lt;/p&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-6 col-sm-6 column"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;hr&gt;&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eveniet molestiae quaerat illum, consequuntur iusto aspernatur quam provident? Possimus!<span class="nt">&lt;/p&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-4 col-sm-4 column"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quis fugit quasi officiis id laudantium error aut ut aperiam dicta saepe non vel, cupiditate illum ipsam velit deleniti natus incidunt impedit molestias dolore quos dolores enim. Aliquid ipsam eaque consequuntur quaerat, suscipit a in. Praesentium repudiandae quibusdam recusandae sequi eligendi quos, dignissimos, officiis officia minima necessitatibus eaque consequatur in id adipisci qui minus voluptatum quae debitis, quas maxime iure. Tempore vero unde quia reiciendis ad beatae voluptate omnis, ipsa expedita ab, quasi, neque. Doloribus, pariatur. Aut hic voluptate.<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="row"> <div class="col-lg-8 col-sm-8 column"> <div class="bootstrap-test"><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Porro distinctio atque molestiae optio, consequuntur? Iusto ratione cumque dolor aut dolore!</p> </div> <div class="row"> <div class="col-lg-6 col-sm-6 column"> <div class="bootstrap-test"><hr/><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Debitis facilis molestias voluptatum laudantium fuga ratione tempora rem dolor dicta rerum vero ut, suscipit ex qui amet quam vel cupiditate quaerat minus assumenda reiciendis, similique omnis delectus! Autem, repudiandae cumque eaque?</p> </div> </div> <div class="col-lg-6 col-sm-6 column"> <div class="bootstrap-test"><hr/><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Eveniet molestiae quaerat illum, consequuntur iusto aspernatur quam provident? Possimus!</p> </div> </div> </div> </div> <div class="col-lg-4 col-sm-4 column"> <div class="bootstrap-test"><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quis fugit quasi officiis id laudantium error aut ut aperiam dicta saepe non vel, cupiditate illum ipsam velit deleniti natus incidunt impedit molestias dolore quos dolores enim. Aliquid ipsam eaque consequuntur quaerat, suscipit a in. Praesentium repudiandae quibusdam recusandae sequi eligendi quos, dignissimos, officiis officia minima necessitatibus eaque consequatur in id adipisci qui minus voluptatum quae debitis, quas maxime iure. Tempore vero unde quia reiciendis ad beatae voluptate omnis, ipsa expedita ab, quasi, neque. Doloribus, pariatur. Aut hic voluptate.</p> </div> </div> </div> <hr/> <h1 id="bootstrap-grid-66">Bootstrap grid 6/6</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span> <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-6 col-sm-6 col-6 column"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;p&gt;</span>Lorem ipsum dolores<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-6 col-sm-6 col-6 column"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;p&gt;</span>Lorem ipsum dolores<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="row"> <div class="col-lg-6 col-sm-6 col-6 column"> <div class="bootstrap-test"><p>Lorem ipsum dolores</p> </div> </div> <div class="col-lg-6 col-sm-6 col-6 column"> <div class="bootstrap-test"><p>Lorem ipsum dolores</p> </div> </div> </div> <hr/> <h1 id="bootstrap-grid-93">Bootstrap grid 9/3</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-9 col-sm-9 col-9 column"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;p&gt;</span>Lorem ipsum dolores<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-lg-3 col-sm-3 col-3 column"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bootstrap-test"</span><span class="nt">&gt;&lt;p&gt;</span>Lorem ipsum dolores<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="row"> <div class="col-lg-9 col-sm-9 col-9 column"> <div class="bootstrap-test"><p>Lorem ipsum dolores</p> </div> </div> <div class="col-lg-3 col-sm-3 col-3 column"> <div class="bootstrap-test"><p>Lorem ipsum dolores</p> </div> </div> </div> <hr/> <h1 id="bootstrap-center">Bootstrap center</h1> <p>Useful for a form for exemple</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row justify-content-center"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"col-12 col-lg-6 bootstrap-test"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"text-align:center;"</span><span class="nt">&gt;</span>Hello<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="container"> <div class="row justify-content-center"> <div class="col-12 col-lg-6 bootstrap-test"> <p style="text-align:center;">Hello</p> </div> </div> </div> <hr/> <h1 id="grid-system">Grid system</h1> <details><summary>Code css</summary> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">css
</span><span class="nc">.grid-container</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#000095</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">grid</span><span class="p">;</span>
  <span class="py">grid-template-columns</span><span class="p">:</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span> <span class="m">1</span><span class="n">fr</span><span class="p">;</span>
  <span class="py">grid-gap</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.grid-element</span> <span class="p">{</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#95005c</span><span class="p">;</span>
  <span class="nl">background-size</span><span class="p">:</span> <span class="n">cover</span><span class="p">;</span>
  <span class="nl">background-position</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">150px</span><span class="p">;</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">5px</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="n">space-around</span><span class="p">;</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">22px</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
  <span class="nl">font-weight</span><span class="p">:</span> <span class="nb">bolder</span><span class="p">;</span>

<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> </details> <details><summary>Code html</summary> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-container"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-element"</span><span class="nt">&gt;</span>
    1
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-element"</span><span class="nt">&gt;</span>
    2
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-element"</span><span class="nt">&gt;</span>
    3
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-element"</span><span class="nt">&gt;</span>
    4
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-element"</span><span class="nt">&gt;</span>
    5
  <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid-element"</span><span class="nt">&gt;</span>
    6
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="p">```</span>
</code></pre></div></div> </details> <div class="grid-container"> <div class="grid-element"> 1 </div> <div class="grid-element"> 2 </div> <div class="grid-element"> 3 </div> <div class="grid-element"> 4 </div> <div class="grid-element"> 5 </div> <div class="grid-element"> 6 </div> </div> <hr/> <h1 id="for-more">For more</h1> <ul> <li><a href="https://bootstrap-grid-generator.github.io/">Bootstrap-grid-test</a></li> <li><a href="https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout/Flexbox_skills">Flexbox-test</a></li> <li><a href="https://flexboxfroggy.com/#fr">Flexbox-froggy-game</a></li> </ul>]]></content><author><name></name></author><category term="code"/><category term="css"/><category term="flexbox"/><category term="grid"/><category term="code"/><summary type="html"><![CDATA[Flexbox and grid layout]]></summary></entry><entry><title type="html">Js VS Ruby</title><link href="https://dswagon.github.io/code/2023/08/28/JSvsRUBY.html" rel="alternate" type="text/html" title="Js VS Ruby"/><published>2023-08-28T00:00:00+00:00</published><updated>2023-08-28T00:00:00+00:00</updated><id>https://dswagon.github.io/code/2023/08/28/JSvsRUBY</id><content type="html" xml:base="https://dswagon.github.io/code/2023/08/28/JSvsRUBY.html"><![CDATA[<h1 id="basic-types">Basic Types:</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="s2">"Hello"</span>                     <span class="c1"># String</span>
<span class="mi">42</span>                          <span class="c1"># Integer</span>
<span class="mf">3.14</span>                        <span class="c1"># Float</span>
<span class="kp">true</span>                        <span class="c1"># TrueClass</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="dl">"</span><span class="s2">Hello</span><span class="dl">"</span>                     <span class="c1">// string</span>
<span class="mi">42</span>                          <span class="c1">// number</span>
<span class="mf">3.14</span>                        <span class="c1">// number</span>
<span class="kc">true</span>                        <span class="c1">// boolean</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="checking-types">Checking types:</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="s2">"Boris"</span><span class="p">.</span><span class="nf">class</span>   <span class="c1"># =&gt; String</span>
<span class="mi">42</span><span class="p">.</span><span class="nf">class</span>        <span class="c1"># =&gt; Integer</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="k">typeof</span><span class="p">(</span><span class="dl">"</span><span class="s2">Boris</span><span class="dl">"</span><span class="p">);</span>    <span class="c1">// =&gt; 'string'</span>
<span class="k">typeof</span><span class="p">(</span><span class="mi">42</span><span class="p">);</span>         <span class="c1">// =&gt; 'number'</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="casting-types">Casting types:</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="s2">"42"</span><span class="p">.</span><span class="nf">to_i</span>   <span class="c1"># =&gt; 42</span>
<span class="mi">42</span><span class="p">.</span><span class="nf">to_s</span>     <span class="c1"># =&gt; "42"</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">JavaScript</span>
<span class="nb">Number</span><span class="p">.</span><span class="nf">parseInt</span><span class="p">(</span><span class="dl">'</span><span class="s1">42</span><span class="dl">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>   <span class="c1">// =&gt; 42</span>

<span class="p">(</span><span class="mi">42</span><span class="p">).</span><span class="nf">toString</span><span class="p">();</span>             <span class="c1">// =&gt; '42'</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="data-structures">Data structures:</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="p">[</span> <span class="s2">"Hello"</span><span class="p">,</span> <span class="s2">"Le"</span><span class="p">,</span> <span class="s2">"Bob"</span><span class="p">,</span> <span class="mi">42</span> <span class="p">]</span>    <span class="c1"># Array</span>

<span class="p">{</span> <span class="ss">name: </span><span class="s2">"bob"</span><span class="p">,</span> <span class="ss">age: </span><span class="mi">42</span> <span class="p">}</span>          <span class="c1"># Hash with symbol as keys</span>
<span class="p">{</span> <span class="s2">"name"</span> <span class="o">=&gt;</span> <span class="s2">"bob"</span><span class="p">,</span> <span class="s2">"age"</span> <span class="o">=&gt;</span> <span class="mi">42</span> <span class="p">}</span>  <span class="c1"># Hash with string as keys</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="p">[</span> <span class="dl">'</span><span class="s1">Hello</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Le</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Bob</span><span class="dl">'</span><span class="p">,</span> <span class="mi">42</span> <span class="p">]</span>    <span class="c1">// Array</span>

<span class="p">{</span> <span class="nl">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bob</span><span class="dl">'</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="mi">42</span> <span class="p">}</span>          <span class="c1">// Object</span>
<span class="p">{</span> <span class="dl">'</span><span class="s1">name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">bob</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">age</span><span class="dl">'</span><span class="p">:</span> <span class="mi">42</span> <span class="p">}</span>      <span class="c1">// Object (the exact same)</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="arrays">Arrays</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">fruits</span> <span class="o">&lt;&lt;</span> <span class="s2">"Apple"</span>     <span class="c1"># Create (fruits.push("Apple") works as well)</span>
<span class="n">fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>             <span class="c1"># Read</span>
<span class="n">fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"Banana"</span>  <span class="c1"># Update</span>
<span class="n">fruits</span><span class="p">.</span><span class="nf">delete_at</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>   <span class="c1"># Delete</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nx">fruits</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">Apple</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Create</span>
<span class="nx">fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>            <span class="c1">// Read</span>
<span class="nx">fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Banana</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Update</span>
<span class="nx">fruits</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>  <span class="c1">// Delete (1 item at index 0)</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="interpolation">Interpolation:</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="n">first_name</span> <span class="o">=</span> <span class="s2">"Ringo"</span>
<span class="n">last_name</span> <span class="o">=</span> <span class="s2">"Starr"</span>
<span class="n">message</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2"> is a drummer"</span>
<span class="c1"># =&gt; "Ringo Starr is a drummer";</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">firstName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Ringo</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">lastName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Starr</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">firstName</span><span class="p">}</span><span class="s2"> </span><span class="p">${</span><span class="nx">lastName</span><span class="p">}</span><span class="s2"> is a drummer`</span><span class="p">;</span>
<span class="c1">// =&gt; "Ringo Starr is a drummer";</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="finding-elements">Finding elements</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">some-id</span><span class="dl">"</span><span class="p">)</span>
<span class="c1">// `querySelector` returns the first element having this class</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.class-name</span><span class="dl">"</span><span class="p">)</span>
<span class="c1">// `querySelectorAll` returns all the elements having this class</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.class-name</span><span class="dl">"</span><span class="p">)</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="insert-html">Insert HTML</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">Using</span> <span class="nf">insertAdjacentHTML</span><span class="p">():</span>
<span class="c1">// Select a `&lt;ul&gt;` element</span>
<span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">some-list-id</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// Append an `&lt;li&gt;` using `.insertAdjacentHTML`</span>
<span class="nx">list</span><span class="p">.</span><span class="nf">insertAdjacentHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">beforeend</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">&lt;li&gt;Luke&lt;/li&gt;</span><span class="dl">"</span><span class="p">);</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">Using</span> <span class="nf">appendChild</span><span class="p">():</span>
<span class="c1">// Select a `&lt;ul&gt;` element</span>
<span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">some-list-id</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// Create a `Node` object</span>
<span class="kd">const</span> <span class="nx">listItem</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">li</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// =&gt; &lt;li&gt;&lt;/li&gt;</span>
<span class="c1">// Sets inner text to "Luke"</span>
<span class="nx">listItem</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Luke</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// Append it to the list</span>
<span class="nx">list</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">listItem</span><span class="p">);</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="accessing-content">Accessing content</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;a</span> <span class="na">id=</span><span class="s">"link-id"</span> <span class="na">data-sample=</span><span class="s">"hello"</span> <span class="na">href=</span><span class="s">"https://www.lewagon.com/fr"</span><span class="nt">&gt;</span>Le Wagon<span class="nt">&lt;/a&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">link-id</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// Get the text inside the `element`</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">innerText</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span>
<span class="c1">// =&gt; "Le Wagon"</span>
<span class="c1">// Get the link (href) of `element`</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">value</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">sample</span>
<span class="c1">// =&gt; "hello"</span>
<span class="c1">// You can also change or add data to the `element`</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">sample</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">new value</span><span class="dl">"</span><span class="p">;</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="styling">Styling</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">none</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">toggle</span><span class="p">(</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">element</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">contains</span><span class="p">(</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="iterations">Iterations</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">menu</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Rice</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Chicken</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Burger</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Pizza</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Cheese cake</span><span class="dl">'</span><span class="p">];</span>
<span class="p">```</span>
</code></pre></div></div> <p>will return the following result:</p> <p>I will eat Rice I will eat Chicken I will eat Burger I will eat Pizza I will eat Cheese cake</p> <h2 id="the-while-loop">The While Loop</h2> <p>The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">while</span><span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">menu</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">I will eat</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">menu</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
   <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> <h2 id="the-do-while-loop">The Do While Loop</h2> <p>The do‚Ä¶while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">do</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">I will eat</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">menu</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
   <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">while</span><span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">menu</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
<span class="p">```</span>
</code></pre></div></div> <h2 id="the-for-loop">The For Loop</h2> <p>The for statement creates a loop with 3 optional expressions: _for (expression 1; expression 2; expression 3) { ‚Ä¶ }__</p> <ul> <li>Expression 1 is executed (one time) before the execution of the code block.</li> <li>Expression 2 defines the condition for executing the code block.</li> <li>Expression 3 is executed (every time) after the code block has been executed.</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">menu</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">;)</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">I will eat</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">menu</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> <h2 id="the-for-in-loop">The For In Loop</h2> <p>The for‚Ä¶in statement iterates over all enumerable string properties of an object (ignoring properties keyed by symbols), including inherited enumerable properties.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">index</span> <span class="k">in</span> <span class="nx">menu</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">I will eat</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">menu</span><span class="p">[</span><span class="nx">index</span><span class="p">]);</span>
<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> <h2 id="the-for-of-loop">The For Of Loop</h2> <p>The for‚Ä¶of statement executes a loop that operates on a sequence of values sourced from an iterable object. It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="k">for</span><span class="p">(</span><span class="kd">const</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">menu</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">I will eat</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">item</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> <h2 id="the-for-each-loop">The For Each Loop</h2> <p>The forEach() method executes a provided function once for each array element.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">menu</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">I will eat</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">item</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="event-listeners">Event Listeners</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">button</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// do something on click of an element</span>
<span class="p">})</span>
<span class="nx">input</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">blur</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// do something when leaving an input</span>
<span class="p">})</span>
<span class="nx">form</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// do something on submit of a form</span>
<span class="p">})</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">DOMContentLoaded</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// do something when page is loaded</span>
<span class="p">})</span>
<span class="p">```</span>
</code></pre></div></div> <p>Alternatively, you can also store the callback in a variable:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// do something</span>
<span class="p">}</span>
<span class="nx">element</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span>
<span class="c1">// See all referenced events</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="trigger-an-event">Trigger an event</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">eventSubmit</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Event</span><span class="p">(</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">element</span><span class="p">.</span><span class="nf">dispatchEvent</span><span class="p">(</span><span class="nx">eventSubmit</span><span class="p">)</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="ask-for-confirmation">Ask for confirmation</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="k">if </span><span class="p">(</span><span class="nf">confirm</span><span class="p">(</span><span class="dl">"</span><span class="s2">Are you sure you want to delete?</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
  <span class="c1">// do something</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="c1">// do something else</span>
<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">bindConfirm</span> <span class="o">=</span> <span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">element</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nf">confirm</span><span class="p">(</span><span class="dl">"</span><span class="s2">Are you sure you want to delete?</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">event</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="ajax">AJAX</h1> <ul> <li>GET request:</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">SOME_URL</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// do something with the json</span>
  <span class="p">})</span>
<span class="p">```</span>
</code></pre></div></div> <ul> <li>POST request:</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://reqres.in/api/register</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">headers</span><span class="p">:</span> <span class="p">{</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">},</span>
  <span class="na">body</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">eve.holt@reqres.in</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">password</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">pistol</span><span class="dl">"</span><span class="p">})</span>
<span class="p">})</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nf">json</span><span class="p">())</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">```</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><category term="javascript"/><category term="ruby"/><category term="js"/><summary type="html"><![CDATA[Javascript basics]]></summary></entry><entry><title type="html">Javascript</title><link href="https://dswagon.github.io/code/2023/08/28/Javascript.html" rel="alternate" type="text/html" title="Javascript"/><published>2023-08-28T00:00:00+00:00</published><updated>2023-08-28T00:00:00+00:00</updated><id>https://dswagon.github.io/code/2023/08/28/Javascript</id><content type="html" xml:base="https://dswagon.github.io/code/2023/08/28/Javascript.html"><![CDATA[<h1 id="javascript-basics">Javascript basics</h1> <p>First, open this <a href="https://replit.com/@DsWagon/Nodejs">Replit</a>.</p> <p>The Client-side Programming Language What‚Äôs with the name? JavaScript != Java JavaScript Version ES6: (Short for ECMAScript Edition 6) released in 2015 JavaScript vs. Ruby Being both OOP languages, JavaScript and Ruby share a lot of commonalities.</p> <center> <div class="row justify-content-center align-items-center"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/javascript/function-definition-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/javascript/function-definition-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/javascript/function-definition-1400.webp"/> <img src="/assets/img/javascript/function-definition.jpg" class="img-fluid rounded z-depth-1" width="100%" height="100%" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </center> <hr/> <h2 id="declaring-variables">Declaring variables</h2> <p>You have to say const or let.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="c1">// with `const` variables reassignment is forbidden</span>
<span class="kd">const</span> <span class="nx">fullName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Sebastien Saunier</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">message</span>  <span class="o">=</span> <span class="s2">`Hello </span><span class="p">${</span><span class="nx">fullName</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>

<span class="c1">// `let` variables can be reassigned with another value</span>
<span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">total</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h2 id="objects">Objects</h2> <p>Ruby calls them hashes, JavaScript calls them objects.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="n">const</span> <span class="n">student</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">firstName: </span><span class="s2">"David"</span><span class="p">,</span>
  <span class="ss">lastName: </span><span class="s2">"Serrano"</span>
<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <p>But JavaScript gives an even shorter syntax for getting/setting values:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">student</span><span class="p">.</span><span class="nx">firstName</span> <span class="c1">// gets the value "Boris"</span>

<span class="nx">student</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">David</span><span class="dl">"</span> <span class="c1">// sets the value to "Romain"</span>
<span class="p">```</span>
</code></pre></div></div> <p>JavaScript doesn‚Äôt have symbols like Ruby, so objects generally have String keys.</p> <hr/> <h2 id="if-statements">if statements</h2> <p>const age = 17;</p> <pre><code class="language-`markdown">```javascript
let age = 30; // const age = 30;
if (age &gt;= 18) {
  console.log("You can vote");
} else if (age === 17) {
  console.log("You can't vote yet, but you will be able to soon!")
} else {
  console.log("You can't vote");
}
```
</code></pre> <p>Note: to check equality, Ruby uses == but JavaScript uses === ‚Äî</p> <h2 id="functions">Functions</h2> <p>This is called an arrow function and is how we do things in ES6 üí™</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="c1">// Defining a function</span>
<span class="kd">const</span> <span class="nx">addition</span> <span class="o">=</span> <span class="p">(</span><span class="nx">param1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">param1</span> <span class="o">+</span> <span class="nx">param2</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// Console this</span>
<span class="nf">addition</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
<span class="p">```</span>
</code></pre></div></div> <details><summary>Another method</summary> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="c1">// Inline arrow function, with implicit return</span>
<span class="kd">const</span> <span class="nx">addition</span> <span class="o">=</span> <span class="p">(</span><span class="nx">param1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">param1</span> <span class="o">+</span> <span class="nx">param2</span><span class="p">;</span>

<span class="c1">// Or the old way</span>
<span class="kd">function</span> <span class="nf">addition</span><span class="p">(</span><span class="nx">param1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">param1</span> <span class="o">+</span> <span class="nx">param2</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> </details> <hr/> <details><summary>Function exemple</summary> <p>Let‚Äôs livecode an arrow function and store it into capitalize.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">capitalize</span> <span class="o">=</span> <span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">firstLetter</span> <span class="o">=</span> <span class="nx">word</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">toUpperCase</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">restOfTheWord</span> <span class="o">=</span> <span class="nx">word</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">toLowerCase</span><span class="p">();</span>
  <span class="k">return</span> <span class="s2">`</span><span class="p">${</span><span class="nx">firstLetter</span><span class="p">}${</span><span class="nx">restOfTheWord</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">};</span>
<span class="c1">// Console this</span>
<span class="nf">capitalize</span><span class="p">(</span><span class="dl">"</span><span class="s2">wagon</span><span class="dl">"</span><span class="p">)</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Wagon</span><span class="dl">"</span>
<span class="nf">capitalize</span><span class="p">(</span><span class="dl">"</span><span class="s2">codIng</span><span class="dl">"</span><span class="p">)</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Coding</span><span class="dl">"</span>
<span class="p">```</span>
</code></pre></div></div> </details> <hr/> <h1 id="not-working-for-now-interacting-with-the-dom">NOT WORKING FOR NOW Interacting with the DOM</h1> <p>The most important method</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="nx">CSS_SELECTOR</span><span class="p">);</span>
<span class="p">```</span>
</code></pre></div></div> <p>Selecting an element with an id</p> <p><code>&lt;ul id="players"&gt;&lt;/ul&gt;<code></code></code></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#players</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// CSS id selector</span>

<span class="c1">// you will also occasionally see this, which does the same thing:</span>
<span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">players</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// no need for a `#`</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="elements-with-no-id">Elements with no id?</h1> <ul> <li>Basic CSS selectors Reminder <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">css
</span><span class="nt">p</span>               <span class="c">/* Type selector  */</span>
<span class="nc">.red</span>            <span class="c">/* Class selector */</span>
<span class="nf">#players</span>        <span class="c">/* ID selector    */</span>
<span class="p">```</span>
</code></pre></div> </div> </li> <li>Advanced CSS selectors Reminder <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">css
</span><span class="nt">ul</span> <span class="nc">.active</span>     <span class="c">/* Descending combinator */</span>
<span class="nt">ul</span> <span class="o">&gt;</span> <span class="nc">.active</span>   <span class="c">/* Child combinator */</span>
<span class="p">```</span>
</code></pre></div> </div> <hr/> </li> </ul> <h1 id="append-content">Append content</h1> <ul> <li>traduction en francais = ajouter du contenu</li> </ul> <p>We are using the Element#insertAdjacentHTML method.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">list</span><span class="p">.</span><span class="nf">insertAdjacentHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">beforeend</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">&lt;li&gt;Luke&lt;/li&gt;</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nf">insertAdjacentHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">beforeend</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">&lt;li&gt;Anakin&lt;/li&gt;</span><span class="dl">"</span><span class="p">);</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="selecting-from-a-subset-of-the-dom">Selecting from a subset of the DOM</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"red"</span><span class="nt">&gt;</span>A red paragraph<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">"players"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"green"</span><span class="nt">&gt;</span>Luke<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"red"</span><span class="nt">&gt;</span>Anakin<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ul&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#players</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.red</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">innerText</span><span class="p">);</span>
<span class="c1">// =&gt; ?</span>
<span class="nx">Anakin</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="selecting-several-elements">Selecting several elements</h1> <ul> <li>We want to select all winners</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;ol</span> <span class="na">id=</span><span class="s">"fifa-wins"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;li&gt;</span>Brazil (5 wins)<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Germany (4 wins)<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Italy (4 wins)<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Argentina (3 wins)<span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>Uruguay (2 wins)<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">countries</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">#fifa-wins li</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">//countries is a NodeList variable. This operates similarly to an Array.</span>
<span class="p">```</span>
</code></pre></div></div> <p>Use the right method</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">countries</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#fifa-wins li</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// =&gt; &lt;li&gt;Brazil (5 wins)&lt;/li&gt;</span>
<span class="c1">// IMPORTANT querySelector returns the first element it finds!</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">countries</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">#fifa-wins li</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// =&gt; NodeList(5) [li, li, li, li, li]</span>
<span class="c1">// querySelectorAll returns them all in a list!</span>
<span class="p">```</span>
</code></pre></div></div> <p>Append ‚ÄúFrance (2 wins)‚Äù to the list.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#fifa-wins</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nf">insertAdjacentHTML</span><span class="p">(</span><span class="dl">'</span><span class="s1">beforeend</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">&lt;li&gt;France (2 wins)&lt;/li&gt;</span><span class="dl">'</span><span class="p">);</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="show--hide">Show / Hide</h1> <p>Use HTMLElement.style</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#fifa-wins</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">// Hide</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">none</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// Show</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>
<span class="nx">Add</span> <span class="o">/</span> <span class="nx">Remove</span> <span class="nx">a</span> <span class="kd">class</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="use-classlist">Use classList</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">list</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">list</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">toggle</span><span class="p">(</span><span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">);</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="read--write-inputs">Read / Write inputs</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"email"</span> <span class="na">id=</span><span class="s">"email"</span> <span class="na">value=</span><span class="s">"paul@gmail.com"</span> <span class="nt">/&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">emailInput</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#email</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// Read</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">emailInput</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
<span class="c1">// Write</span>
<span class="nx">emailInput</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">john@gmail.com</span><span class="dl">"</span><span class="p">;</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="extract-text--html">Extract text / HTML</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://www.lewagon.com"</span> <span class="na">id=</span><span class="s">"home"</span><span class="nt">&gt;</span>Le Wagon <span class="nt">&lt;em&gt;</span>rocks<span class="nt">&lt;/em&gt;&lt;/a&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">home</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#home</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">home</span><span class="p">.</span><span class="nx">innerText</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">home</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">home</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>

<span class="nx">home</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Le Wagon &lt;strong&gt;rocks&lt;/strong&gt;!</span><span class="dl">"</span><span class="p">;</span> <span class="c1">// Update HTML</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="addeventlistener">AddEventListener</h1> <p>Addeventlistener is a method that takes two arguments, the first is the event type, the second is a function that will be called when the event occurs. example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">The document was clicked</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <p>before addEventlistener we have to select the element we want to add the event to. Here are the elements we can select:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">);</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">getElementsByClassName</span><span class="p">(</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span><span class="p">);</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">getElementsByTagName</span><span class="p">(</span><span class="dl">'</span><span class="s1">tag</span><span class="dl">'</span><span class="p">);</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">css selector</span><span class="dl">'</span><span class="p">);</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">css selector</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>there is not only document there is also window, which is the global object in client-side JavaScript, and represents the browser window that our code is running inside. It‚Äôs where the global variables and functions we create live, and we can access it as window. or just as a global object. example:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nf">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hello world!</span><span class="dl">'</span><span class="p">);</span>
<span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">load</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">window loaded</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div> <h1 id="comment">Comment</h1> <p>After the // or /*, you can write anything you want. The browser will ignore it.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="c1">// Change heading:</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">myH</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">My First Page</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// Change paragraph:</span>
<span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">myP</span><span class="dl">"</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">My first paragraph.</span><span class="dl">"</span><span class="p">;</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="iterators-for-each">Iterators for each</h1> <p>Array &amp; Objects There are many similarities between Arrays in Ruby and JavaScript. Only difference is, a Hash is called an Object in JavaScript!</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">beatles</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">paul</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">john</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">ringo</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">george</span><span class="dl">"</span><span class="p">];</span>
<span class="nx">beatles</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">beatle</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">beatle</span><span class="p">.</span><span class="nf">toUpperCase</span><span class="p">());</span>
<span class="p">});</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="generating-a-list-with-javascript">Generating a list with Javascript</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">abba</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Bjorn</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Benny</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Anni-frid</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Agnetha</span><span class="dl">'</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">liContent</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>

<span class="nx">abba</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">member</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">liContent</span> <span class="o">+=</span> <span class="s2">`&lt;li&gt;</span><span class="p">${</span><span class="nx">member</span><span class="p">}</span><span class="s2">&lt;/li&gt;`</span><span class="p">;</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">ulContent</span> <span class="o">=</span> <span class="s2">`&lt;ul&gt;</span><span class="p">${</span><span class="nx">liContent</span><span class="p">}</span><span class="s2">&lt;/ul&gt;`</span><span class="p">;</span>

<span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nf">insertAdjacentHTML</span><span class="p">(</span><span class="dl">'</span><span class="s1">beforeend</span><span class="dl">'</span><span class="p">,</span> <span class="nx">ulContent</span><span class="p">);</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="change-the-look-of-our-unordered-list">Change the look of our unordered list</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="c1">// Find all the 'li' elements</span>
<span class="kd">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">li</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">// Iterate over each element to update the content</span>
<span class="nx">elements</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="dl">'</span><span class="s1">üéµ</span><span class="dl">'</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// Change the style of the 'ul'</span>
<span class="nx">ul</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">listStyleType</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">upper-roman</span><span class="dl">"</span><span class="p">;</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="dataset">Dataset</h1> <p>Custom attributes storing data on any HTML element, accessible through the dataset property.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="o">&lt;</span><span class="nx">li</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">agnetha</span><span class="dl">"</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">abba</span><span class="dl">"</span> <span class="nx">data</span><span class="o">-</span><span class="nx">instrument</span><span class="o">=</span><span class="dl">"</span><span class="s2">vocals</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Agnetha</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span><span class="kd">const</span> <span class="nx">instrument</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">agnetha</span><span class="dl">"</span><span class="p">).</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">instrument</span><span class="p">;</span>
<span class="c1">// returns "vocals"</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="using-multiple-data--attributes">Using multiple data-* attributes</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="c1">// List of ABBA members</span>
<span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">abba</span><span class="dl">"</span> <span class="nx">data</span><span class="o">-</span><span class="nx">instrument</span><span class="o">=</span><span class="dl">"</span><span class="s2">vocals</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Agnetha</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">li</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">abba</span><span class="dl">"</span> <span class="nx">data</span><span class="o">-</span><span class="nx">instrument</span><span class="o">=</span><span class="dl">"</span><span class="s2">guitars</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Bjorn</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">li</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">abba</span><span class="dl">"</span> <span class="nx">data</span><span class="o">-</span><span class="nx">instrument</span><span class="o">=</span><span class="dl">"</span><span class="s2">keyboards</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Benny</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">li</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">abba</span><span class="dl">"</span> <span class="nx">data</span><span class="o">-</span><span class="nx">instrument</span><span class="o">=</span><span class="dl">"</span><span class="s2">vocals</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Anni</span><span class="o">-</span><span class="nx">Frid</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/ul&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <p>Let‚Äôs reveal their corresponding instruments using JavaScript!</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">abba</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">.abba</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">abba</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">member</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">member</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s2">`: </span><span class="p">${</span><span class="nx">member</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">instrument</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">});</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="events">Events</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">blur</span>
<span class="nx">click</span>
<span class="nx">change</span>
<span class="nx">focus</span>
<span class="nx">keyup</span>
<span class="nx">mouseover</span>
<span class="nx">resize</span>
<span class="nx">scroll</span>
<span class="nx">submit</span>
<span class="nx">touchstart</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="events-occur-on-specific-objects">Events occur on specific objects</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">DOMContentLoaded</span>  <span class="err">#</span> <span class="nb">document</span>
<span class="nx">blur</span>              <span class="err">#</span> <span class="nx">input</span> <span class="o">/</span> <span class="nx">textarea</span>
<span class="nx">click</span>             <span class="err">#</span> <span class="nx">any</span> <span class="nx">visible</span> <span class="nx">element</span>
<span class="nx">change</span>            <span class="err">#</span> <span class="nx">select</span>
<span class="nx">focus</span>             <span class="err">#</span> <span class="nx">any</span> <span class="nx">visible</span> <span class="nx">element</span>
<span class="nx">keyup</span>             <span class="err">#</span> <span class="nb">window</span> <span class="o">/</span> <span class="nx">any</span> <span class="nx">focused</span> <span class="nx">element</span>
<span class="nx">mouseover</span>         <span class="err">#</span> <span class="nx">any</span> <span class="nx">visible</span> <span class="nx">element</span>
<span class="nx">resize</span>            <span class="err">#</span> <span class="nb">window</span>
<span class="nx">scroll</span>            <span class="err">#</span> <span class="nb">window</span> <span class="o">/</span> <span class="nx">any</span> <span class="nx">scrollable</span> <span class="nx">element</span>
<span class="nx">submit</span>            <span class="err">#</span> <span class="nx">form</span>
<span class="nx">touchstart</span>        <span class="err">#</span> <span class="k">for</span> <span class="nx">mobile</span> <span class="nx">devices</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="event-listener">Event Listener</h1> <p>Use addEventListener to react to an event.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">element</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="nx">eventType</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// Do something (callback)</span>
<span class="p">});</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="listening-to-a-click">Listening to a click</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"https://kitt.lewagon.com/placeholder/users/monsieurpaillard"</span>
     <span class="na">id=</span><span class="s">"romain"</span> <span class="na">height=</span><span class="s">"200"</span> <span class="na">alt=</span><span class="s">"Romain Paillard"</span> <span class="nt">/&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="kd">const</span> <span class="nx">romain</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">romain</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">romain</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">event</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">);</span>
<span class="p">});</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="toggle-the-img-circle-css-class-when-clicking-on-these-images">Toggle the img-circle CSS class when clicking on these images.</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">css
</span><span class="nc">.img-circle</span> <span class="p">{</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nx">With</span> <span class="nx">several</span> <span class="nx">elements</span><span class="p">?</span>
<span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">https://kitt.lewagon.com/placeholder/users/monsieurpaillard</span><span class="dl">"</span>
     <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">romain</span><span class="dl">"</span> <span class="nx">height</span><span class="o">=</span><span class="dl">"</span><span class="s2">200</span><span class="dl">"</span> <span class="nx">alt</span><span class="o">=</span><span class="dl">"</span><span class="s2">Romain Paillard</span><span class="dl">"</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">https://kitt.lewagon.com/placeholder/users/Papillard</span><span class="dl">"</span>
     <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">boris</span><span class="dl">"</span> <span class="nx">height</span><span class="o">=</span><span class="dl">"</span><span class="s2">200</span><span class="dl">"</span> <span class="nx">alt</span><span class="o">=</span><span class="dl">"</span><span class="s2">Boris Paillard</span><span class="dl">"</span> <span class="o">/&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">img</span><span class="dl">"</span><span class="p">).</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">img</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">img</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">toggle</span><span class="p">(</span><span class="dl">"</span><span class="s2">img-circle</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="checkboxes">Checkboxes</h1> <p>Add a form with checkboxes:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">html
</span><span class="nt">&lt;h1&gt;</span>Choose a pet:<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-light"</span><span class="nt">&gt;</span>Select all<span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;form&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"checkbox"</span> <span class="na">id=</span><span class="s">"cat"</span> <span class="na">class=</span><span class="s">"form-check-input"</span> <span class="na">name=</span><span class="s">"cat"</span> <span class="na">value=</span><span class="s">"Cat"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"cat"</span> <span class="na">class=</span><span class="s">"form-check-label"</span><span class="nt">&gt;</span> I have a cat<span class="nt">&lt;/label&gt;&lt;br&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"checkbox"</span> <span class="na">id=</span><span class="s">"dog"</span> <span class="na">class=</span><span class="s">"form-check-input"</span> <span class="na">name=</span><span class="s">"dog"</span> <span class="na">value=</span><span class="s">"Dog"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"dog"</span> <span class="na">class=</span><span class="s">"form-check-label"</span><span class="nt">&gt;</span> I have a dog<span class="nt">&lt;/label&gt;&lt;br&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"checkbox"</span> <span class="na">id=</span><span class="s">"rabbit"</span> <span class="na">class=</span><span class="s">"form-check-input"</span> <span class="na">name=</span><span class="s">"rabbit"</span> <span class="na">value=</span><span class="s">"Rabbit"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"rabbit"</span> <span class="na">class=</span><span class="s">"form-check-label"</span><span class="nt">&gt;</span> I have a rabbit<span class="nt">&lt;/label&gt;&lt;br&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-primary"</span><span class="nt">&gt;</span>Submit<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;form&gt;</span>
<span class="p">```</span>
</code></pre></div></div> <p>Select the button, add an Event Listener and code the callback:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">javascript
</span><span class="c1">// application.js</span>
<span class="kd">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">.btn-light</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">button</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">checkboxes</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="dl">'</span><span class="s1">.form-check-input</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">checkboxes</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">checkbox</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">checkbox</span><span class="p">.</span><span class="nx">checked</span> <span class="o">=</span> <span class="o">!</span><span class="nx">checkbox</span><span class="p">.</span><span class="nx">checked</span><span class="p">;</span>
  <span class="p">});</span>
<span class="p">});</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="for-more">For more</h1> <ul> <li><a href="https://codetogo.io/all/">Codetogo</a></li> <li><a href="https://replit.com/@DsWagon/Nodejs">Replit</a></li> <li><a href="https://htmlcheatsheet.com/js/">CheatsheetJS</a></li> </ul>]]></content><author><name></name></author><category term="code"/><category term="javascript"/><category term="code"/><category term="js"/><summary type="html"><![CDATA[Javascript basics]]></summary></entry><entry><title type="html">React.js</title><link href="https://dswagon.github.io/code/2023/08/28/Reactjs.html" rel="alternate" type="text/html" title="React.js"/><published>2023-08-28T00:00:00+00:00</published><updated>2023-08-28T00:00:00+00:00</updated><id>https://dswagon.github.io/code/2023/08/28/Reactjs</id><content type="html" xml:base="https://dswagon.github.io/code/2023/08/28/Reactjs.html"><![CDATA[<p>React.js is an open-source JavaScript library that is used for building user interfaces specifically for single-page applications. It‚Äôs used for handling the view layer for web and mobile apps. React also allows us to create reusable UI components. React was first created by Jordan Walke, a software engineer working for Facebook. React first deployed on Facebook‚Äôs newsfeed in 2011 and on Instagram.com in 2012.</p>]]></content><author><name></name></author><category term="code"/><category term="React"/><category term="js"/><category term="javascript"/><category term="code"/><summary type="html"><![CDATA[React.js basics]]></summary></entry><entry><title type="html">Ror start</title><link href="https://dswagon.github.io/code/2023/08/28/Ruby-on-rails.html" rel="alternate" type="text/html" title="Ror start"/><published>2023-08-28T00:00:00+00:00</published><updated>2023-08-28T00:00:00+00:00</updated><id>https://dswagon.github.io/code/2023/08/28/Ruby%20on%20rails</id><content type="html" xml:base="https://dswagon.github.io/code/2023/08/28/Ruby-on-rails.html"><![CDATA[<h1 id="starting-a-project--design-phase">Starting a project : design phase</h1> <p>Before jumping right into the code, first you have to think a bit about what defines your project. It‚Äôs the design phase.</p> <ul> <li>User stories</li> <li>Database schema</li> <li>Mockups / Design</li> <li>Routes</li> <li>Create the project</li> </ul> <h1 id="creating-project">Creating project</h1> <ul> <li>Create</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">bash
</span>rails new <span class="se">\</span>
  <span class="nt">--database</span> postgresql <span class="se">\</span>
  <span class="nt">--javascript</span> webpack <span class="se">\</span>
  <span class="nt">--template</span> https://raw.githubusercontent.com/lewagon/rails-templates/master/devise.rb <span class="se">\</span>
  PROJECT-NAME

<span class="nb">cd </span>PROJECT-NAME
gh repo create
git push origin master
<span class="p">```</span>
</code></pre></div></div> <ul> <li>Retrieve the project</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">bash
</span>git clone git@github.com:username/PROJECT-NAME.git
<span class="nb">cd </span>PROJECT-NAME
bundle <span class="nb">install
</span>yarn <span class="nb">install
</span>rails db:create db:migrate
<span class="nb">touch</span> .env
<span class="nb">echo</span> <span class="s1">'.env*'</span> <span class="o">&gt;&gt;</span> .gitignore <span class="c"># if not already in .gitignore</span>
<span class="p">```</span>
</code></pre></div></div> <ul> <li>Finish bootstraping the application</li> </ul> <p>Add Devise (unless you used the devise template!) Add models Write all the routes Add some seeds + configure image upload (if needed) Configure your domain name Making a feature</p> <ul> <li> <p>Define the route(s) Generate and implement the controller and its action(s) Implement the view ‚ö† Only create the controller you need for the specific feature you work on. Do not create all controllers at once! ‚ö† And only create the action(s) needed by your feature, not all the actions of the controller!</p> </li> <li> <p>The steps become:</p> </li> </ul> <p>Find the route(s) via a rails routes Deduce the name of the controller and action(s) Generate the controller and its action(s) with the ‚Äìskip-routes option We use the ‚Äìskip-routes option in order to not pollute the config/routes.rb file.</p> <ul> <li> <p>Fetching new changes After finishing a feature, when you go back on master branch, you‚Äôll fetch the latest changes:</p> </li> <li> <p>git pull origin master Each time you pull changes from master, there are operations that you might have to do. In the listing of the files, if you see:</p> </li> </ul> <p>the Gemfile, then run a bundle install the package.json file, then run yarn install any file in db/migrate/ folder, then run rails db:migrate</p>]]></content><author><name></name></author><category term="code"/><category term="ror"/><category term="ruby"/><category term="code"/><summary type="html"><![CDATA[Ror basics]]></summary></entry><entry><title type="html">Ruby</title><link href="https://dswagon.github.io/code/2023/08/28/Ruby.html" rel="alternate" type="text/html" title="Ruby"/><published>2023-08-28T00:00:00+00:00</published><updated>2023-08-28T00:00:00+00:00</updated><id>https://dswagon.github.io/code/2023/08/28/Ruby</id><content type="html" xml:base="https://dswagon.github.io/code/2023/08/28/Ruby.html"><![CDATA[<p>Ruby is a dynamic, interpreted, reflective, object-oriented, general-purpose programming language. It was designed and developed in the mid-1990s by Yukihiro ‚ÄúMatz‚Äù Matsumoto in Japan.</p> <h1 id="ruby-basics">Ruby Basics</h1> <h2 id="data-types">Data Types</h2> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="no">Type</span>	<span class="no">Example</span>
<span class="no">String</span>	<span class="s2">"Text"</span>
<span class="no">Integer</span>	<span class="mi">10</span>
<span class="no">Float</span>	<span class="mf">11.5</span>
<span class="no">Range</span>	<span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="s1">'a'</span><span class="o">..</span><span class="s1">'z'</span><span class="p">)</span>
<span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">10</span><span class="p">)</span> <span class="n">includes</span> <span class="mi">10</span>
<span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="mi">10</span><span class="p">)</span> <span class="n">exludes</span> <span class="mi">10</span>
<span class="no">Boolean</span>	<span class="kp">true</span> <span class="p">(</span><span class="no">TrueClass</span><span class="p">)</span>
<span class="kp">false</span> <span class="p">(</span><span class="no">FalseClass</span><span class="p">)</span>
<span class="no">Array</span>	<span class="n">list</span> <span class="n">of</span> <span class="n">elements</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="p">[</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span><span class="p">,</span> <span class="s2">"c"</span><span class="p">]</span>
<span class="no">Hash</span>	<span class="p">{</span> <span class="ss">key: </span><span class="s2">"value"</span> <span class="p">}</span>
<span class="no">Symbol</span>	<span class="ss">:symbol</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="variables">Variables</h1> <ul> <li>We can store any datatype in a variable</li> <li>This way we can re-use the value later</li> <li>We can assign a value to the variable (store it in a box)</li> <li>We can re-assign a value to the variable (open the box and store a new value)</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="n">age</span> <span class="o">=</span> <span class="mi">29</span>
<span class="nb">name</span> <span class="o">=</span> <span class="s2">"Sebastien"</span>
<span class="n">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">key: </span><span class="s2">"value"</span> <span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="concatenation">Concatenation</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="n">first_name</span> <span class="o">=</span> <span class="s2">"Boris"</span>
<span class="n">last_name</span> <span class="o">=</span> <span class="s2">"Paillard"</span>
<span class="s1">'I am'</span> <span class="o">+</span> <span class="s1">' '</span> <span class="o">+</span> <span class="n">first_name</span> <span class="o">+</span> <span class="s1">' '</span> <span class="o">+</span> <span class="n">last_name</span>
<span class="no">You</span> <span class="n">need</span> <span class="n">to</span> <span class="n">add</span> <span class="n">the</span> <span class="n">whitespace</span><span class="p">,</span> <span class="n">otherwise</span> <span class="n">it</span> <span class="n">will</span> <span class="n">turn</span> <span class="n">into</span> <span class="n">one</span> <span class="n">big</span> <span class="n">string</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="interpolation">Interpolation</h1> <p>inject Ruby code inside a string delimiters must be double quotes</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="s2">"I am </span><span class="si">#{</span><span class="n">age</span><span class="si">}</span><span class="s2"> years old"</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="incrementationdecrementation">Incrementation/Decrementation</h1> <p>We can increment or decrement a variable that stores a number (Float or Integer)</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="c1"># Incrementation</span>
<span class="n">age</span> <span class="o">=</span> <span class="n">age</span> <span class="o">+</span> <span class="mi">1</span>
<span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1"># shortcut</span>
<span class="c1"># Decrementation</span>
<span class="n">age</span> <span class="o">=</span> <span class="n">age</span> <span class="o">-</span> <span class="mi">1</span>
<span class="n">age</span> <span class="o">-=</span> <span class="mi">1</span> <span class="c1"># shortcut</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="conditionalsloops">Conditionals/Loops</h1> <p>Single branch conditional statement</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="k">if</span> <span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span>
  <span class="nb">puts</span> <span class="s2">"You can vote"</span>
<span class="k">end</span>
<span class="c1"># on a single line</span>
<span class="nb">puts</span> <span class="s2">"You can vote"</span> <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">18</span>
<span class="c1"># using `unless`</span>
<span class="k">unless</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span>
  <span class="nb">puts</span> <span class="s2">"You can vote"</span>
<span class="k">end</span>
<span class="nb">puts</span> <span class="s2">"You can vote"</span> <span class="k">unless</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="multi-branch-conditional-statement">Multi-branch conditional statement</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="n">hour</span> <span class="o">=</span> <span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">hour</span>
<span class="k">if</span> <span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">6</span>
  <span class="nb">puts</span> <span class="s2">"Good morning!"</span>
<span class="k">elsif</span> <span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">12</span> <span class="o">&amp;&amp;</span> <span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">18</span>
  <span class="nb">puts</span> <span class="s2">"Good afternoon!"</span>
<span class="k">elsif</span> <span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">18</span> <span class="o">&amp;&amp;</span> <span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">22</span>
  <span class="nb">puts</span> <span class="s2">"Good evening!"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"Good night!"</span>
<span class="k">end</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="using-case--when">Using case / when:</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="nb">puts</span> <span class="s2">"What do you want to do?"</span>
<span class="n">action</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">chomp</span>

<span class="k">case</span> <span class="n">action</span>
<span class="k">when</span> <span class="s2">"read"</span>
  <span class="nb">puts</span> <span class="s2">"You are in READ mode"</span>
<span class="k">when</span> <span class="s2">"write"</span>
  <span class="nb">puts</span> <span class="s2">"You are in WRITE mode"</span>
<span class="k">when</span> <span class="s2">"exit"</span>
  <span class="nb">puts</span> <span class="s2">"Bye Bye"</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">"Wrong action"</span>
<span class="k">end</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="loops">Loops</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="k">while</span> <span class="n">condition</span>
  <span class="c1"># executed while condition is truthy</span>
<span class="k">end</span>
<span class="k">until</span> <span class="n">condition</span>
  <span class="c1"># executed until condition is truthy</span>
<span class="k">end</span>
<span class="kp">loop</span> <span class="k">do</span>
  <span class="c1"># run some code</span>
  <span class="k">break</span> <span class="k">if</span> <span class="n">condition</span>
<span class="k">end</span>
<span class="c1"># Not the idiomatic way to iterate through an array in Ruby</span>
<span class="k">for</span> <span class="n">num</span> <span class="k">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
  <span class="nb">puts</span> <span class="n">num</span>
<span class="k">end</span>
<span class="c1"># Each is the idiomatic way to iterate through an array in Ruby</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">num</span>
<span class="k">end</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="methods">Methods</h1> <p>Methods are reusable blocks of code</p> <p>Questions to ask yourself when writing a method:</p> <p>Does it take parameters? If so: how many?</p> <ul> <li>What‚Äôs the name of my method? Does it explain what it does?</li> <li>What does the method return? It always returns something!</li> <li>By default the last line of code</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="k">def</span> <span class="nf">name_method</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
  <span class="c1"># method body</span>
  <span class="c1"># returns something</span>
<span class="k">end</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="parameters-vs-arguments">Parameters vs. Arguments</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="c1"># Method definition</span>
<span class="k">def</span> <span class="nf">new_population</span><span class="p">(</span><span class="n">population</span><span class="p">,</span> <span class="n">births</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">population</span> <span class="o">+</span> <span class="n">births</span>
<span class="k">end</span>
<span class="c1"># Method call</span>
<span class="nb">puts</span> <span class="n">new_population</span><span class="p">(</span><span class="mi">2000000</span><span class="p">,</span> <span class="mi">300</span><span class="p">)</span>
<span class="p">```</span>
</code></pre></div></div> <ul> <li>Argument: What we pass to the method when we call it</li> <li>2000000 and 300 are arguments</li> <li>Parameter: placeholder for argument when we define the method</li> <li><code class="language-plaintext highlighter-rouge">population</code> and <code class="language-plaintext highlighter-rouge">births</code> are parameters</li> </ul> <h1 id="array">Array</h1> <ul> <li>list of elements</li> <li>access by index</li> <li>shortcut for an array of strings: %w(apple banana pear) will result in [‚Äúapple‚Äù, ‚Äúbanana‚Äù, ‚Äúpear‚Äù] <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="c1"># array of numbers</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="c1"># array of strings</span>
<span class="p">[</span><span class="s2">"seb"</span><span class="p">,</span> <span class="s2">"boris"</span><span class="p">,</span> <span class="s2">"edward"</span><span class="p">]</span>
<span class="c1"># array of arrays</span>
<span class="p">[[</span><span class="s2">"valerie"</span><span class="p">,</span> <span class="mi">149</span><span class="p">],</span> <span class="p">[</span><span class="s2">"sarah"</span><span class="p">,</span> <span class="mi">111</span><span class="p">]]</span>
<span class="c1"># can contain several datatypes (but not common)</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="s2">"text"</span><span class="p">,</span> <span class="mf">13.5</span><span class="p">,</span> <span class="kp">true</span><span class="p">]</span>
<span class="p">```</span>
</code></pre></div> </div> <hr/> </li> </ul> <h1 id="hash">Hash</h1> <ul> <li>collection of key/value pairs</li> <li>access a value with its key</li> <li>keys and values can be of any data type</li> <li>Examples</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="c1"># hash</span>
<span class="n">teachers</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"valerie"</span> <span class="o">=&gt;</span> <span class="mi">149</span><span class="p">,</span> <span class="s2">"sarah"</span> <span class="o">=&gt;</span> <span class="mi">111</span> <span class="p">}</span>
<span class="c1"># more complex hash</span>
<span class="n">paris</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">"Paris"</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="ss">population: </span><span class="mi">2100000</span><span class="p">,</span>
    <span class="ss">monument: </span><span class="s2">"Eiffel tower"</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="crud-array-vs-hash">CRUD: Array vs. Hash</h1> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="no">ACTION</span>	<span class="no">ARRAY</span>	                    <span class="no">HASH</span>
<span class="n">create</span>	<span class="n">array</span> <span class="o">&lt;&lt;</span> <span class="n">element</span>
        <span class="n">array</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>	      <span class="n">name_hash</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
<span class="n">read</span>	  <span class="n">array</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>	            <span class="n">name_hash</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
<span class="n">update</span>	<span class="n">array</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">new</span> <span class="n">value</span>	<span class="n">name_hash</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">new</span> <span class="n">value</span>
<span class="n">delete</span>	<span class="n">array</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
        <span class="n">array</span><span class="p">.</span><span class="nf">delete_at</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>	  <span class="n">name_hash</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="useful-built-in-methods">Useful built-in methods</h1> <ul> <li>String</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="no">Object</span>	<span class="no">Method</span>	                  <span class="no">Explanation</span>
<span class="no">String</span>	<span class="p">.</span><span class="nf">to_i</span>	                    <span class="n">transforms</span> <span class="n">the</span> <span class="n">string</span> <span class="n">into</span> <span class="n">an</span> <span class="no">Integer</span>
<span class="no">String</span>	<span class="p">.</span><span class="nf">to_sym</span>	                  <span class="n">transforms</span> <span class="n">the</span> <span class="n">string</span> <span class="n">into</span> <span class="n">a</span> <span class="no">Symbol</span>
<span class="no">String</span>	<span class="p">.</span><span class="nf">to_f</span>	                    <span class="n">transforms</span> <span class="n">the</span> <span class="n">string</span> <span class="n">into</span> <span class="n">a</span> <span class="no">Float</span>
<span class="no">String</span>	<span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s2">""</span><span class="p">)</span>	              <span class="n">returns</span> <span class="n">array</span> <span class="n">of</span> <span class="n">characters</span>
<span class="no">String</span>	<span class="p">.</span><span class="nf">upcase</span>
        <span class="p">.</span><span class="nf">downcase</span>
        <span class="p">.</span><span class="nf">capitalize</span>	              <span class="n">transforms</span> <span class="n">the</span> <span class="n">string</span>
<span class="no">String</span>	<span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="n">regex</span><span class="p">,</span> <span class="n">new_string</span><span class="p">)</span>	<span class="n">replace</span> <span class="n">something</span> <span class="n">that</span> <span class="n">matches</span> <span class="n">regex</span>
<span class="no">String</span>	<span class="p">.</span><span class="nf">scan</span><span class="p">(</span><span class="n">regex</span><span class="p">)</span>	            <span class="nb">scan</span> <span class="n">a</span> <span class="n">text</span> <span class="k">for</span> <span class="n">regex</span><span class="p">,</span> <span class="n">returns</span> <span class="n">array</span> <span class="n">of</span> <span class="n">matches</span>
<span class="p">```</span>
</code></pre></div></div> <ul> <li>Integer/Float</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="no">Object</span>	<span class="no">Method</span>	<span class="no">Explanation</span>
<span class="no">Integer</span><span class="o">/</span><span class="no">Float</span>	<span class="p">.</span><span class="nf">to_s</span>	<span class="n">transforms</span> <span class="n">a</span> <span class="no">Float</span> <span class="ow">or</span> <span class="no">Integer</span> <span class="n">to</span> <span class="no">String</span>
<span class="no">Integer</span><span class="o">/</span><span class="no">Float</span>	<span class="p">.</span><span class="nf">fdiv</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>	<span class="n">get</span> <span class="n">exact</span> <span class="n">division</span> <span class="p">(</span><span class="n">with</span> <span class="n">decimals</span><span class="p">)</span>
<span class="no">Integer</span>	<span class="p">.</span><span class="nf">even?</span>
        <span class="p">.</span><span class="nf">odd?</span>	<span class="n">check</span> <span class="k">if</span> <span class="n">an</span> <span class="no">Integer</span> <span class="n">is</span> <span class="n">even</span> <span class="ow">or</span> <span class="n">odd</span>
<span class="no">Integer</span>	<span class="nb">rand</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>	<span class="n">get</span> <span class="n">random</span> <span class="n">number</span> <span class="n">between</span> <span class="n">e</span><span class="p">.</span><span class="nf">g</span><span class="o">.</span> <span class="mi">0</span><span class="o">..</span><span class="mi">5</span>
<span class="no">Float</span>	<span class="p">.</span><span class="nf">truncate</span>
      <span class="p">.</span><span class="nf">round</span>	<span class="n">round</span> <span class="no">Float</span> <span class="n">up</span> <span class="ow">or</span> <span class="n">down</span>
<span class="p">```</span>
</code></pre></div></div> <ul> <li>Range</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="no">Object</span> <span class="no">Method</span>	<span class="no">Explanation</span>
<span class="no">Range</span>	<span class="p">.</span><span class="nf">to_a</span>	  <span class="n">quickly</span> <span class="n">get</span> <span class="n">array</span> <span class="n">of</span> <span class="n">elements</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="mi">5</span><span class="p">).</span><span class="nf">to_a</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="p">```</span>
</code></pre></div></div> <ul> <li>Array</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="no">Object</span>	<span class="no">Method</span>	<span class="no">Explanation</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">sort</span>	<span class="c1"># sort an array</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">sort_by</span> <span class="c1"># sort an array based on something</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">length</span>
      <span class="p">.</span><span class="nf">count</span>
      <span class="p">.</span><span class="nf">size</span>	<span class="c1"># returns how many elements in the array</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">each</span>	<span class="c1"># iterate over all the elements in the array</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">each_with_index</span> <span class="c1"># iterate over array with index</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">map</span> <span class="c1"># creates a new array</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">select</span>
      <span class="p">.</span><span class="nf">reject</span>	<span class="c1"># select or reject where condition is true</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">empty?</span>	<span class="c1"># check if array is empty</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">include?</span>	<span class="c1"># check if something is present in the array</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">join</span>	<span class="c1"># join elements in array to e.g. one big string</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">reverse</span>	<span class="c1"># reverse the array order of elements</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">sample</span>	<span class="c1"># get random element</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">shuffle</span>	<span class="c1"># randomize order of array</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">take</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>	<span class="c1"># take or drop number (num) of elements of array</span>
<span class="no">Array</span>	<span class="p">.</span><span class="nf">first</span>
      <span class="p">.</span><span class="nf">last</span>	     <span class="nb">select</span> <span class="n">first</span> <span class="ow">or</span> <span class="n">last</span> <span class="n">element</span> <span class="n">of</span> <span class="n">array</span>
<span class="p">```</span>
</code></pre></div></div> <ul> <li>Hash</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="no">Object</span>	<span class="no">Method</span>	<span class="no">Explanation</span>
<span class="no">Hash</span>	<span class="p">.</span><span class="nf">key?</span><span class="p">(</span><span class="n">name_key</span><span class="p">)</span>	<span class="n">check</span> <span class="k">if</span> <span class="n">key</span> <span class="n">exists</span> <span class="k">in</span> <span class="nb">hash</span>
<span class="no">Hash</span>	<span class="p">.</span><span class="nf">keys</span>	<span class="n">get</span> <span class="n">array</span> <span class="n">of</span> <span class="n">keys</span> <span class="n">of</span> <span class="n">the</span> <span class="nb">hash</span>
<span class="no">Hash</span>	<span class="p">.</span><span class="nf">values</span>	<span class="n">get</span> <span class="n">array</span> <span class="n">of</span> <span class="nb">hash</span> <span class="n">values</span>
<span class="no">Hash</span>	<span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>	<span class="n">iterate</span> <span class="n">over</span> <span class="n">key</span> <span class="ow">and</span> <span class="n">value</span> <span class="n">of</span> <span class="nb">hash</span>
<span class="p">```</span>
</code></pre></div></div> <hr/> <h1 id="iterators--block-parameters">Iterators &amp; Block parameters</h1> <ul> <li>Iterators are methods we can call on collections such as an Array or a Hash</li> <li>Comes with a block of code between do‚Ä¶end or between {‚Ä¶}</li> <li>An iterator has block parameters, parameters we can pass to the block</li> </ul> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="n">musicians</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'David Gilmour'</span><span class="p">,</span> <span class="s1">'Roger Waters'</span><span class="p">,</span> <span class="s1">'Richard Wright'</span><span class="p">,</span> <span class="s1">'Nick Mason'</span><span class="p">]</span>
<span class="n">musicians</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">musician</span><span class="o">|</span> <span class="c1"># musician is the block parameter</span>
  <span class="nb">puts</span> <span class="s2">"Hello </span><span class="si">#{</span><span class="n">musician</span><span class="si">}</span><span class="s2">!"</span>
<span class="k">end</span>
<span class="n">musicians</span><span class="p">.</span><span class="nf">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">musician</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span> <span class="c1"># musician &amp; index are the block parameters</span>
  <span class="nb">puts</span> <span class="s2">"</span><span class="si">#{</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">musician</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="p">```</span>
</code></pre></div></div> <h1 id="regex">Regex</h1> <p>We use Regular Expressions for data validation, e.g. to validate a form input and for data extraction, e.g. to extract phone numbers from a text. Regular Expressions have their own class, which comes with its own built-in methods</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">ruby
</span><span class="no">Object</span>	<span class="no">Method</span>	<span class="no">Explanation</span>
<span class="no">Regex</span>	<span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="n">regex_pattern</span><span class="p">)</span>	<span class="n">returns</span> <span class="n">a</span> <span class="n">match_data</span> <span class="n">object</span>
<span class="no">Regex</span>	<span class="p">.</span><span class="nf">match?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>	<span class="n">check</span> <span class="k">if</span> <span class="n">a</span> <span class="n">regex</span> <span class="n">matches</span> <span class="n">a</span> <span class="n">string</span>
<span class="p">```</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><category term="ruby"/><category term="code"/><summary type="html"><![CDATA[Ruby basics]]></summary></entry><entry><title type="html">Git</title><link href="https://dswagon.github.io/code/2023/08/26/Git.html" rel="alternate" type="text/html" title="Git"/><published>2023-08-26T00:00:00+00:00</published><updated>2023-08-26T00:00:00+00:00</updated><id>https://dswagon.github.io/code/2023/08/26/Git</id><content type="html" xml:base="https://dswagon.github.io/code/2023/08/26/Git.html"><![CDATA[<h2 id="git-basics">Git Basics</h2> <p><br/> Git is a version control system that lets you track who made changes to what when and has options for easily updating a shared or public version of your code on github.com.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">git
</span><span class="sb">git add .
git commit -m "Why I did this change"
git push &lt;remote&gt; &lt;branch&gt; OR git push origin master
Project history:
# See the list of all the commits that have done so far : git log git lg</span>
<span class="p">```</span>
</code></pre></div></div> <p>&nbsp;</p> <h2 id="new-features">New Features</h2> <p><br/> When you want to start a new feature. You have to create a new branch to work from:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">git
</span><span class="sb">(master) git status (CLEAN)
(master) git checkout -b my-feature
(my-feature) git add .
(my-feature) git commit -m 'XXXX'
(my-feature) git push origin my-feature
(my-feature) git status (CLEAN)
(my-feature) gh repo view --web
# GO CREATE A PULL REQUEST ON GITHUB
(my-feature) git checkout master
(master)     git pull origin master
(master)     git sweep
(master)     git checkout -b my-new-feature</span>
<span class="p">```</span>
</code></pre></div></div> <p>&nbsp;</p> <h2 id="getting-latest-changes">Getting latest changes</h2> <p><br/> When you want to get the latest changes from master on your branch:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">git
</span><span class="sb">(my-feature) git add .
(my-feature) git commit -m 'XXXX'
(my-feature) git status (CLEAN)
(my-feature) git checkout master
(master)     git pull origin master
(master)     git checkout my-feature
(my-feature) git merge master</span>
<span class="p">```</span>
</code></pre></div></div> <p>&nbsp;</p> <h2 id="solving-conflicts">Solving Conflicts</h2> <p><br/> When you can‚Äôt merge your Pull Request due to conflicts. GitHub proposes a web interface to resolve conflicts on Pull Requests. First, try to use their feature. It might ease the process. Otherwise, follow this process:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">git
</span><span class="sb">(my-feature) git status (CLEAN)
(my-feature) git checkout master
(master) git pull origin master
(master) git checkout my-feature
(my-feature) git merge master</span>
<span class="p">```</span>
</code></pre></div></div> <p><br/> Now it‚Äôs time to fix all the conflicts. You have to open your editor and fix them. Locate them with <code class="language-plaintext highlighter-rouge">$$ cmd + shift + f $$</code>. <br/></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">git
</span><span class="sb">(my-feature) git add .
(my-feature) git commit -m "Fix conflicts"
(my-feature) git push origin my-feature</span>
<span class="p">```</span>
</code></pre></div></div> <p><br/> Go on GitHub and merge your Pull Request. <br/></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">git
</span><span class="sb">(master) git pull origin master
(master) git sweep
(master) git checkout -b my-new-feature</span>
<span class="p">```</span>
</code></pre></div></div> <p>&nbsp;</p> <h2 id="fix-an-accidental-commit-to-master">Fix an accidental commit to master</h2> <p><br/> This operation can be done ONLY if you HAVEN‚ÄôT PUSHED to GitHub yet! When you accidentally committed some changes to master and want to move them to a new branch. You have to create a new branch for your feature. This branch will contain your commit. Finally, you‚Äôll have to remove your commit from master. Here are the steps:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">git
</span><span class="sb">(master) git checkout -b my-feature
(my-feature) git checkout master
(master) git reset HEAD~ --hard
(master) git checkout my-feature</span>
<span class="p">```</span>
</code></pre></div></div> <p>&nbsp;</p> <h2 id="sharingsynching-your-repository">Sharing/Synching your Repository</h2> <p><br/> Ultimately we want to share our code, normally by synching it to a central repository. For doing so, we have to add a remote.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">git
</span><span class="sb">git remote add origin git@github.com:username/existing_project.git
You can list your remotes with:
git remote -v</span>
<span class="p">```</span>
</code></pre></div></div> <p><br/> The real powerful thing is that you can add multiple different remotes. This is often used in combination with cloud hosting solutions for deploying your code on your server. For instance, you could add a remote named ‚Äúheroku‚Äù which points to your cloud hosting server repository.</p> <p>&nbsp;</p> <h2 id="github-cli">GitHub CLI</h2> <p><br/> GitHub Command Line; Interface. It allows you to interact with GitHub through your terminal. Create a public repository in one command:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">git
</span><span class="sb">my-responsive-profile git:(master) gh repo create
? What would you like to do? Push an existing local repository to GitHub
? Path to local repository .
? Repository name my-responsive-profile
? Description
? Visibility Public
‚úì Created repository dmilon/my-responsive-profile on GitHub
? Add a remote? Yes
? What should the new remote be called? origin
‚úì Added remote git@github.com:dmilon/my-responsive-profile.git
? Would you like to push commits from the current branch to the "origin"? Yes
‚úì Pushed commits to git@github.com:dmilon/my-responsive-profile.git</span>
<span class="p">```</span>
</code></pre></div></div> <p>&nbsp;</p> <h2 id="view-a-github-repository-web-page">View a GitHub repository web page</h2> <p><br/> Change your current working directory to a local GitHub repository and run:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">git
</span><span class="sb">gh browse # opens this repository GitHub page in your web browser
Dealing with Pull Requests
Open a new pull request based on your current branch (other than the master or main branch):

gh pr create -w # opens the pull request creation page in your web browser
Check out a pull request:

gh pr checkout {&lt;number&gt; | &lt;url&gt; | &lt;branch&gt;} # fetches and checks out the branch of the PR from GitHub
View the pull request page of your current branch (other than the master or main branch):

gh pr view -w # opens the pull request page of your current branch in your web browser
Share code snippets through Gist
GitHub Gist is a pastebin service which allows you to store and share code snippets called gists.</span>
<span class="p">```</span>
</code></pre></div></div> <p>https://www.ndpsoftware.com/git-cheatsheet.html#loc=workspace;</p>]]></content><author><name></name></author><category term="code"/><category term="git"/><category term="github"/><category term="code"/><summary type="html"><![CDATA[Git gitHub basics]]></summary></entry><entry><title type="html">Md emoji</title><link href="https://dswagon.github.io/code/2023/08/26/Markdown-emojy.html" rel="alternate" type="text/html" title="Md emoji"/><published>2023-08-26T00:00:00+00:00</published><updated>2023-08-26T00:00:00+00:00</updated><id>https://dswagon.github.io/code/2023/08/26/Markdown%20emojy</id><content type="html" xml:base="https://dswagon.github.io/code/2023/08/26/Markdown-emojy.html"><![CDATA[<p>This Markdown cheat sheet emoji is from <a href="https://gist.github.com/rxaviers/7360908">rxaviers</a> but customized to my needs.</p> <p>See also <a href="https://github-emoji-picker.rickstaa.dev/">Emoji picker</a>.</p> <hr/> <h2 id="faces">Faces</h2> <table> <thead> <tr> <th>:bowtie: <code class="language-plaintext highlighter-rouge">:bowtie:</code></th> <th>:smile: <code class="language-plaintext highlighter-rouge">:smile:</code></th> <th>:laughing: <code class="language-plaintext highlighter-rouge">:laughing:</code></th> </tr> </thead> <tbody> <tr> <td>:blush: <code class="language-plaintext highlighter-rouge">:blush:</code></td> <td>:smiley: <code class="language-plaintext highlighter-rouge">:smiley:</code></td> <td>:relaxed: <code class="language-plaintext highlighter-rouge">:relaxed:</code></td> </tr> <tr> <td>:smirk: <code class="language-plaintext highlighter-rouge">:smirk:</code></td> <td>:heart_eyes: <code class="language-plaintext highlighter-rouge">:heart_eyes:</code></td> <td>:kissing_heart: <code class="language-plaintext highlighter-rouge">:kissing_heart:</code></td> </tr> <tr> <td>:kissing_closed_eyes: <code class="language-plaintext highlighter-rouge">:kissing_closed_eyes:</code></td> <td>:flushed: <code class="language-plaintext highlighter-rouge">:flushed:</code></td> <td>:relieved: <code class="language-plaintext highlighter-rouge">:relieved:</code></td> </tr> <tr> <td>:satisfied: <code class="language-plaintext highlighter-rouge">:satisfied:</code></td> <td>:grin: <code class="language-plaintext highlighter-rouge">:grin:</code></td> <td>:wink: <code class="language-plaintext highlighter-rouge">:wink:</code></td> </tr> <tr> <td>:stuck_out_tongue_winking_eye: <code class="language-plaintext highlighter-rouge">:stuck_out_tongue_winking_eye:</code></td> <td>:stuck_out_tongue_closed_eyes: <code class="language-plaintext highlighter-rouge">:stuck_out_tongue_closed_eyes:</code></td> <td>:grinning: <code class="language-plaintext highlighter-rouge">:grinning:</code></td> </tr> <tr> <td>:kissing: <code class="language-plaintext highlighter-rouge">:kissing:</code></td> <td>:kissing_smiling_eyes: <code class="language-plaintext highlighter-rouge">:kissing_smiling_eyes:</code></td> <td>:stuck_out_tongue: <code class="language-plaintext highlighter-rouge">:stuck_out_tongue:</code></td> </tr> <tr> <td>:sleeping: <code class="language-plaintext highlighter-rouge">:sleeping:</code></td> <td>:worried: <code class="language-plaintext highlighter-rouge">:worried:</code></td> <td>:frowning: <code class="language-plaintext highlighter-rouge">:frowning:</code></td> </tr> <tr> <td>:anguished: <code class="language-plaintext highlighter-rouge">:anguished:</code></td> <td>:open_mouth: <code class="language-plaintext highlighter-rouge">:open_mouth:</code></td> <td>:grimacing: <code class="language-plaintext highlighter-rouge">:grimacing:</code></td> </tr> <tr> <td>:confused: <code class="language-plaintext highlighter-rouge">:confused:</code></td> <td>:hushed: <code class="language-plaintext highlighter-rouge">:hushed:</code></td> <td>:expressionless: <code class="language-plaintext highlighter-rouge">:expressionless:</code></td> </tr> <tr> <td>:unamused: <code class="language-plaintext highlighter-rouge">:unamused:</code></td> <td>:sweat_smile: <code class="language-plaintext highlighter-rouge">:sweat_smile:</code></td> <td>:sweat: <code class="language-plaintext highlighter-rouge">:sweat:</code></td> </tr> <tr> <td>:disappointed_relieved: <code class="language-plaintext highlighter-rouge">:disappointed_relieved:</code></td> <td>:weary: <code class="language-plaintext highlighter-rouge">:weary:</code></td> <td>:pensive: <code class="language-plaintext highlighter-rouge">:pensive:</code></td> </tr> <tr> <td>:disappointed: <code class="language-plaintext highlighter-rouge">:disappointed:</code></td> <td>:confounded: <code class="language-plaintext highlighter-rouge">:confounded:</code></td> <td>:fearful: <code class="language-plaintext highlighter-rouge">:fearful:</code></td> </tr> <tr> <td>:cold_sweat: <code class="language-plaintext highlighter-rouge">:cold_sweat:</code></td> <td>:persevere: <code class="language-plaintext highlighter-rouge">:persevere:</code></td> <td>:cry: <code class="language-plaintext highlighter-rouge">:cry:</code></td> </tr> <tr> <td>:sob: <code class="language-plaintext highlighter-rouge">:sob:</code></td> <td>:joy: <code class="language-plaintext highlighter-rouge">:joy:</code></td> <td>:astonished: <code class="language-plaintext highlighter-rouge">:astonished:</code></td> </tr> <tr> <td>:scream: <code class="language-plaintext highlighter-rouge">:scream:</code></td> <td>:tired_face: <code class="language-plaintext highlighter-rouge">:tired_face:</code></td> <td>¬†</td> </tr> <tr> <td>:angry: <code class="language-plaintext highlighter-rouge">:angry:</code></td> <td>:rage: <code class="language-plaintext highlighter-rouge">:rage:</code></td> <td>:triumph: <code class="language-plaintext highlighter-rouge">:triumph:</code></td> </tr> <tr> <td>:sleepy: <code class="language-plaintext highlighter-rouge">:sleepy:</code></td> <td>:yum: <code class="language-plaintext highlighter-rouge">:yum:</code></td> <td>:mask: <code class="language-plaintext highlighter-rouge">:mask:</code></td> </tr> <tr> <td>:sunglasses: <code class="language-plaintext highlighter-rouge">:sunglasses:</code></td> <td>:dizzy_face: <code class="language-plaintext highlighter-rouge">:dizzy_face:</code></td> <td>:imp: <code class="language-plaintext highlighter-rouge">:imp:</code></td> </tr> <tr> <td>:smiling_imp: <code class="language-plaintext highlighter-rouge">:smiling_imp:</code></td> <td>:neutral_face: <code class="language-plaintext highlighter-rouge">:neutral_face:</code></td> <td>:no_mouth: <code class="language-plaintext highlighter-rouge">:no_mouth:</code></td> </tr> <tr> <td>:innocent: <code class="language-plaintext highlighter-rouge">:innocent:</code></td> <td>:alien: <code class="language-plaintext highlighter-rouge">:alien:</code></td> <td>:heart: <code class="language-plaintext highlighter-rouge">:heart:</code></td> </tr> <tr> <td>:green_heart: <code class="language-plaintext highlighter-rouge">:green_heart:</code></td> <td>:broken_heart: <code class="language-plaintext highlighter-rouge">:broken_heart:</code></td> <td>:heartbeat: <code class="language-plaintext highlighter-rouge">:heartbeat:</code></td> </tr> <tr> <td>:heartpulse: <code class="language-plaintext highlighter-rouge">:heartpulse:</code></td> <td>:two_hearts: <code class="language-plaintext highlighter-rouge">:two_hearts:</code></td> <td>:revolving_hearts: <code class="language-plaintext highlighter-rouge">:revolving_hearts:</code></td> </tr> <tr> <td>:cupid: <code class="language-plaintext highlighter-rouge">:cupid:</code></td> <td>:sparkling_heart: <code class="language-plaintext highlighter-rouge">:sparkling_heart:</code></td> <td>:sparkles: <code class="language-plaintext highlighter-rouge">:sparkles:</code></td> </tr> <tr> <td>:star: <code class="language-plaintext highlighter-rouge">:star:</code></td> <td>:star2: <code class="language-plaintext highlighter-rouge">:star2:</code></td> <td>:dizzy: <code class="language-plaintext highlighter-rouge">:dizzy:</code></td> </tr> <tr> <td>:boom: <code class="language-plaintext highlighter-rouge">:boom:</code></td> <td>:collision: <code class="language-plaintext highlighter-rouge">:collision:</code></td> <td>:anger: <code class="language-plaintext highlighter-rouge">:anger:</code></td> </tr> <tr> <td>:exclamation: <code class="language-plaintext highlighter-rouge">:exclamation:</code></td> <td>:question: <code class="language-plaintext highlighter-rouge">:question:</code></td> <td>:grey_exclamation: <code class="language-plaintext highlighter-rouge">:grey_exclamation:</code></td> </tr> <tr> <td>:grey_question: <code class="language-plaintext highlighter-rouge">:grey_question:</code></td> <td>:zzz: <code class="language-plaintext highlighter-rouge">:zzz:</code></td> <td>:dash: <code class="language-plaintext highlighter-rouge">:dash:</code></td> </tr> <tr> <td>:sweat_drops: <code class="language-plaintext highlighter-rouge">:sweat_drops:</code></td> <td>:notes: <code class="language-plaintext highlighter-rouge">:notes:</code></td> <td>:musical_note: <code class="language-plaintext highlighter-rouge">:musical_note:</code></td> </tr> <tr> <td>:fire: <code class="language-plaintext highlighter-rouge">:fire:</code></td> <td>:hankey: <code class="language-plaintext highlighter-rouge">:hankey:</code></td> <td>:poop: <code class="language-plaintext highlighter-rouge">:poop:</code></td> </tr> <tr> <td>:shit: <code class="language-plaintext highlighter-rouge">:shit:</code></td> <td>:+1: <code class="language-plaintext highlighter-rouge">:+1:</code></td> <td>:thumbsup: <code class="language-plaintext highlighter-rouge">:thumbsup:</code></td> </tr> <tr> <td>:-1: <code class="language-plaintext highlighter-rouge">:-1:</code></td> <td>:thumbsdown: <code class="language-plaintext highlighter-rouge">:thumbsdown:</code></td> <td>:ok_hand: <code class="language-plaintext highlighter-rouge">:ok_hand:</code></td> </tr> <tr> <td>:punch: <code class="language-plaintext highlighter-rouge">:punch:</code></td> <td>:facepunch: <code class="language-plaintext highlighter-rouge">:facepunch:</code></td> <td>:fist: <code class="language-plaintext highlighter-rouge">:fist:</code></td> </tr> <tr> <td>:v: <code class="language-plaintext highlighter-rouge">:v:</code></td> <td>:wave: <code class="language-plaintext highlighter-rouge">:wave:</code></td> <td>:hand: <code class="language-plaintext highlighter-rouge">:hand:</code></td> </tr> <tr> <td>:raised_hand: <code class="language-plaintext highlighter-rouge">:raised_hand:</code></td> <td>:open_hands: <code class="language-plaintext highlighter-rouge">:open_hands:</code></td> <td>:point_up: <code class="language-plaintext highlighter-rouge">:point_up:</code></td> </tr> <tr> <td>:point_down: <code class="language-plaintext highlighter-rouge">:point_down:</code></td> <td>:point_left: <code class="language-plaintext highlighter-rouge">:point_left:</code></td> <td>:point_right: <code class="language-plaintext highlighter-rouge">:point_right:</code></td> </tr> <tr> <td>:raised_hands: <code class="language-plaintext highlighter-rouge">:raised_hands:</code></td> <td>:pray: <code class="language-plaintext highlighter-rouge">:pray:</code></td> <td>:point_up_2: <code class="language-plaintext highlighter-rouge">:point_up_2:</code></td> </tr> <tr> <td>:clap: <code class="language-plaintext highlighter-rouge">:clap:</code></td> <td>:muscle: <code class="language-plaintext highlighter-rouge">:muscle:</code></td> <td>:metal: <code class="language-plaintext highlighter-rouge">:metal:</code></td> </tr> <tr> <td>:fu: <code class="language-plaintext highlighter-rouge">:fu:</code></td> <td>:walking: <code class="language-plaintext highlighter-rouge">:walking:</code></td> <td>:runner: <code class="language-plaintext highlighter-rouge">:runner:</code></td> </tr> <tr> <td>:running: <code class="language-plaintext highlighter-rouge">:running:</code></td> <td>:couple: <code class="language-plaintext highlighter-rouge">:couple:</code></td> <td>:family: <code class="language-plaintext highlighter-rouge">:family:</code></td> </tr> <tr> <td>:two_men_holding_hands: <code class="language-plaintext highlighter-rouge">:two_men_holding_hands:</code></td> <td>:two_women_holding_hands: <code class="language-plaintext highlighter-rouge">:two_women_holding_hands:</code></td> <td>:dancer: <code class="language-plaintext highlighter-rouge">:dancer:</code></td> </tr> <tr> <td>:dancers: <code class="language-plaintext highlighter-rouge">:dancers:</code></td> <td>:ok_woman: <code class="language-plaintext highlighter-rouge">:ok_woman:</code></td> <td>:no_good: <code class="language-plaintext highlighter-rouge">:no_good:</code></td> </tr> <tr> <td>:information_desk_person: <code class="language-plaintext highlighter-rouge">:information_desk_person:</code></td> <td>:raising_hand: <code class="language-plaintext highlighter-rouge">:raising_hand:</code></td> <td>:bride_with_veil: <code class="language-plaintext highlighter-rouge">:bride_with_veil:</code></td> </tr> <tr> <td>:bow: <code class="language-plaintext highlighter-rouge">:bow:</code></td> <td>¬†</td> <td>¬†</td> </tr> <tr> <td>:couplekiss: <code class="language-plaintext highlighter-rouge">:couplekiss:</code></td> <td>:couple_with_heart: <code class="language-plaintext highlighter-rouge">:couple_with_heart:</code></td> <td>:massage: <code class="language-plaintext highlighter-rouge">:massage:</code></td> </tr> <tr> <td>:haircut: <code class="language-plaintext highlighter-rouge">:haircut:</code></td> <td>:nail_care: <code class="language-plaintext highlighter-rouge">:nail_care:</code></td> <td>:boy: <code class="language-plaintext highlighter-rouge">:boy:</code></td> </tr> <tr> <td>:girl: <code class="language-plaintext highlighter-rouge">:girl:</code></td> <td>:woman: <code class="language-plaintext highlighter-rouge">:woman:</code></td> <td>:man: <code class="language-plaintext highlighter-rouge">:man:</code></td> </tr> <tr> <td>:baby: <code class="language-plaintext highlighter-rouge">:baby:</code></td> <td>:older_woman: <code class="language-plaintext highlighter-rouge">:older_woman:</code></td> <td>:older_man: <code class="language-plaintext highlighter-rouge">:older_man:</code></td> </tr> <tr> <td>:man_with_gua_pi_mao: <code class="language-plaintext highlighter-rouge">:man_with_gua_pi_mao:</code></td> <td>:man_with_turban: <code class="language-plaintext highlighter-rouge">:man_with_turban:</code></td> <td>¬†</td> </tr> <tr> <td>:construction_worker: <code class="language-plaintext highlighter-rouge">:construction_worker:</code></td> <td>:cop: <code class="language-plaintext highlighter-rouge">:cop:</code></td> <td>:angel: <code class="language-plaintext highlighter-rouge">:angel:</code></td> </tr> <tr> <td>:princess: <code class="language-plaintext highlighter-rouge">:princess:</code></td> <td>:smiley_cat: <code class="language-plaintext highlighter-rouge">:smiley_cat:</code></td> <td>:smile_cat: <code class="language-plaintext highlighter-rouge">:smile_cat:</code></td> </tr> <tr> <td>:heart_eyes_cat: <code class="language-plaintext highlighter-rouge">:heart_eyes_cat:</code></td> <td>:kissing_cat: <code class="language-plaintext highlighter-rouge">:kissing_cat:</code></td> <td>:smirk_cat: <code class="language-plaintext highlighter-rouge">:smirk_cat:</code></td> </tr> <tr> <td>:scream_cat: <code class="language-plaintext highlighter-rouge">:scream_cat:</code></td> <td>:crying_cat_face: <code class="language-plaintext highlighter-rouge">:crying_cat_face:</code></td> <td>:joy_cat: <code class="language-plaintext highlighter-rouge">:joy_cat:</code></td> </tr> <tr> <td>:pouting_cat: <code class="language-plaintext highlighter-rouge">:pouting_cat:</code></td> <td>:japanese_ogre: <code class="language-plaintext highlighter-rouge">:japanese_ogre:</code></td> <td>:japanese_goblin: <code class="language-plaintext highlighter-rouge">:japanese_goblin:</code></td> </tr> <tr> <td>:see_no_evil: <code class="language-plaintext highlighter-rouge">:see_no_evil:</code></td> <td>:hear_no_evil: <code class="language-plaintext highlighter-rouge">:hear_no_evil:</code></td> <td>:speak_no_evil: <code class="language-plaintext highlighter-rouge">:speak_no_evil:</code></td> </tr> <tr> <td>:guardsman: <code class="language-plaintext highlighter-rouge">:guardsman:</code></td> <td>:skull: <code class="language-plaintext highlighter-rouge">:skull:</code></td> <td>:feet: <code class="language-plaintext highlighter-rouge">:feet:</code></td> </tr> <tr> <td>:lips: <code class="language-plaintext highlighter-rouge">:lips:</code></td> <td>:kiss: <code class="language-plaintext highlighter-rouge">:kiss:</code></td> <td>:droplet: <code class="language-plaintext highlighter-rouge">:droplet:</code></td> </tr> <tr> <td>:ear: <code class="language-plaintext highlighter-rouge">:ear:</code></td> <td>:eyes: <code class="language-plaintext highlighter-rouge">:eyes:</code></td> <td>:nose: <code class="language-plaintext highlighter-rouge">:nose:</code></td> </tr> <tr> <td>:tongue: <code class="language-plaintext highlighter-rouge">:tongue:</code></td> <td>:love_letter: <code class="language-plaintext highlighter-rouge">:love_letter:</code></td> <td>:bust_in_silhouette: <code class="language-plaintext highlighter-rouge">:bust_in_silhouette:</code></td> </tr> <tr> <td>:busts_in_silhouette: <code class="language-plaintext highlighter-rouge">:busts_in_silhouette:</code></td> <td>:speech_balloon: <code class="language-plaintext highlighter-rouge">:speech_balloon:</code></td> <td>:thought_balloon: <code class="language-plaintext highlighter-rouge">:thought_balloon:</code></td> </tr> </tbody> </table> <h2 id="nature">Nature</h2> <table> <thead> <tr> <th>:sunny: <code class="language-plaintext highlighter-rouge">:sunny:</code></th> <th>:umbrella: <code class="language-plaintext highlighter-rouge">:umbrella:</code></th> <th>:cloud: <code class="language-plaintext highlighter-rouge">:cloud:</code></th> </tr> </thead> <tbody> <tr> <td>:snowflake: <code class="language-plaintext highlighter-rouge">:snowflake:</code></td> <td>:snowman: <code class="language-plaintext highlighter-rouge">:snowman:</code></td> <td>:zap: <code class="language-plaintext highlighter-rouge">:zap:</code></td> </tr> <tr> <td>:cyclone: <code class="language-plaintext highlighter-rouge">:cyclone:</code></td> <td>:foggy: <code class="language-plaintext highlighter-rouge">:foggy:</code></td> <td>:ocean: <code class="language-plaintext highlighter-rouge">:ocean:</code></td> </tr> <tr> <td>:cat: <code class="language-plaintext highlighter-rouge">:cat:</code></td> <td>:dog: <code class="language-plaintext highlighter-rouge">:dog:</code></td> <td>:mouse: <code class="language-plaintext highlighter-rouge">:mouse:</code></td> </tr> <tr> <td>:hamster: <code class="language-plaintext highlighter-rouge">:hamster:</code></td> <td>:rabbit: <code class="language-plaintext highlighter-rouge">:rabbit:</code></td> <td>:wolf: <code class="language-plaintext highlighter-rouge">:wolf:</code></td> </tr> <tr> <td>:frog: <code class="language-plaintext highlighter-rouge">:frog:</code></td> <td>:tiger: <code class="language-plaintext highlighter-rouge">:tiger:</code></td> <td>:koala: <code class="language-plaintext highlighter-rouge">:koala:</code></td> </tr> <tr> <td>:bear: <code class="language-plaintext highlighter-rouge">:bear:</code></td> <td>:pig: <code class="language-plaintext highlighter-rouge">:pig:</code></td> <td>:pig_nose: <code class="language-plaintext highlighter-rouge">:pig_nose:</code></td> </tr> <tr> <td>:cow: <code class="language-plaintext highlighter-rouge">:cow:</code></td> <td>:boar: <code class="language-plaintext highlighter-rouge">:boar:</code></td> <td>:monkey_face: <code class="language-plaintext highlighter-rouge">:monkey_face:</code></td> </tr> <tr> <td>:monkey: <code class="language-plaintext highlighter-rouge">:monkey:</code></td> <td>:horse: <code class="language-plaintext highlighter-rouge">:horse:</code></td> <td>:racehorse: <code class="language-plaintext highlighter-rouge">:racehorse:</code></td> </tr> <tr> <td>:camel: <code class="language-plaintext highlighter-rouge">:camel:</code></td> <td>:sheep: <code class="language-plaintext highlighter-rouge">:sheep:</code></td> <td>:elephant: <code class="language-plaintext highlighter-rouge">:elephant:</code></td> </tr> <tr> <td>:panda_face: <code class="language-plaintext highlighter-rouge">:panda_face:</code></td> <td>:snake: <code class="language-plaintext highlighter-rouge">:snake:</code></td> <td>:bird: <code class="language-plaintext highlighter-rouge">:bird:</code></td> </tr> <tr> <td>:baby_chick: <code class="language-plaintext highlighter-rouge">:baby_chick:</code></td> <td>:hatched_chick: <code class="language-plaintext highlighter-rouge">:hatched_chick:</code></td> <td>:hatching_chick: <code class="language-plaintext highlighter-rouge">:hatching_chick:</code></td> </tr> <tr> <td>:chicken: <code class="language-plaintext highlighter-rouge">:chicken:</code></td> <td>:penguin: <code class="language-plaintext highlighter-rouge">:penguin:</code></td> <td>:turtle: <code class="language-plaintext highlighter-rouge">:turtle:</code></td> </tr> <tr> <td>:bug: <code class="language-plaintext highlighter-rouge">:bug:</code></td> <td>:honeybee: <code class="language-plaintext highlighter-rouge">:honeybee:</code></td> <td>:ant: <code class="language-plaintext highlighter-rouge">:ant:</code></td> </tr> <tr> <td>:beetle: <code class="language-plaintext highlighter-rouge">:beetle:</code></td> <td>:snail: <code class="language-plaintext highlighter-rouge">:snail:</code></td> <td>:octopus: <code class="language-plaintext highlighter-rouge">:octopus:</code></td> </tr> <tr> <td>:tropical_fish: <code class="language-plaintext highlighter-rouge">:tropical_fish:</code></td> <td>:fish: <code class="language-plaintext highlighter-rouge">:fish:</code></td> <td>:whale: <code class="language-plaintext highlighter-rouge">:whale:</code></td> </tr> <tr> <td>:whale2: <code class="language-plaintext highlighter-rouge">:whale2:</code></td> <td>:dolphin: <code class="language-plaintext highlighter-rouge">:dolphin:</code></td> <td>:cow2: <code class="language-plaintext highlighter-rouge">:cow2:</code></td> </tr> <tr> <td>:ram: <code class="language-plaintext highlighter-rouge">:ram:</code></td> <td>:rat: <code class="language-plaintext highlighter-rouge">:rat:</code></td> <td>:water_buffalo: <code class="language-plaintext highlighter-rouge">:water_buffalo:</code></td> </tr> <tr> <td>:tiger2: <code class="language-plaintext highlighter-rouge">:tiger2:</code></td> <td>:rabbit2: <code class="language-plaintext highlighter-rouge">:rabbit2:</code></td> <td>:dragon: <code class="language-plaintext highlighter-rouge">:dragon:</code></td> </tr> <tr> <td>:goat: <code class="language-plaintext highlighter-rouge">:goat:</code></td> <td>:rooster: <code class="language-plaintext highlighter-rouge">:rooster:</code></td> <td>:dog2: <code class="language-plaintext highlighter-rouge">:dog2:</code></td> </tr> <tr> <td>:pig2: <code class="language-plaintext highlighter-rouge">:pig2:</code></td> <td>:mouse2: <code class="language-plaintext highlighter-rouge">:mouse2:</code></td> <td>:ox: <code class="language-plaintext highlighter-rouge">:ox:</code></td> </tr> <tr> <td>:dragon_face: <code class="language-plaintext highlighter-rouge">:dragon_face:</code></td> <td>:blowfish: <code class="language-plaintext highlighter-rouge">:blowfish:</code></td> <td>:crocodile: <code class="language-plaintext highlighter-rouge">:crocodile:</code></td> </tr> <tr> <td>:dromedary_camel: <code class="language-plaintext highlighter-rouge">:dromedary_camel:</code></td> <td>:leopard: <code class="language-plaintext highlighter-rouge">:leopard:</code></td> <td>:cat2: <code class="language-plaintext highlighter-rouge">:cat2:</code></td> </tr> <tr> <td>:poodle: <code class="language-plaintext highlighter-rouge">:poodle:</code></td> <td>:paw_prints: <code class="language-plaintext highlighter-rouge">:paw_prints:</code></td> <td>:bouquet: <code class="language-plaintext highlighter-rouge">:bouquet:</code></td> </tr> <tr> <td>:cherry_blossom: <code class="language-plaintext highlighter-rouge">:cherry_blossom:</code></td> <td>:tulip: <code class="language-plaintext highlighter-rouge">:tulip:</code></td> <td>:four_leaf_clover: <code class="language-plaintext highlighter-rouge">:four_leaf_clover:</code></td> </tr> <tr> <td>:rose: <code class="language-plaintext highlighter-rouge">:rose:</code></td> <td>:sunflower: <code class="language-plaintext highlighter-rouge">:sunflower:</code></td> <td>:hibiscus: <code class="language-plaintext highlighter-rouge">:hibiscus:</code></td> </tr> <tr> <td>:maple_leaf: <code class="language-plaintext highlighter-rouge">:maple_leaf:</code></td> <td>:leaves: <code class="language-plaintext highlighter-rouge">:leaves:</code></td> <td>:fallen_leaf: <code class="language-plaintext highlighter-rouge">:fallen_leaf:</code></td> </tr> <tr> <td>:herb: <code class="language-plaintext highlighter-rouge">:herb:</code></td> <td>:mushroom: <code class="language-plaintext highlighter-rouge">:mushroom:</code></td> <td>:cactus: <code class="language-plaintext highlighter-rouge">:cactus:</code></td> </tr> <tr> <td>:palm_tree: <code class="language-plaintext highlighter-rouge">:palm_tree:</code></td> <td>:evergreen_tree: <code class="language-plaintext highlighter-rouge">:evergreen_tree:</code></td> <td>:deciduous_tree: <code class="language-plaintext highlighter-rouge">:deciduous_tree:</code></td> </tr> <tr> <td>:chestnut: <code class="language-plaintext highlighter-rouge">:chestnut:</code></td> <td>:seedling: <code class="language-plaintext highlighter-rouge">:seedling:</code></td> <td>:blossom: <code class="language-plaintext highlighter-rouge">:blossom:</code></td> </tr> <tr> <td>:ear_of_rice: <code class="language-plaintext highlighter-rouge">:ear_of_rice:</code></td> <td>:shell: <code class="language-plaintext highlighter-rouge">:shell:</code></td> <td>:globe_with_meridians: <code class="language-plaintext highlighter-rouge">:globe_with_meridians:</code></td> </tr> <tr> <td>:sun_with_face: <code class="language-plaintext highlighter-rouge">:sun_with_face:</code></td> <td>:full_moon_with_face: <code class="language-plaintext highlighter-rouge">:full_moon_with_face:</code></td> <td>:new_moon_with_face: <code class="language-plaintext highlighter-rouge">:new_moon_with_face:</code></td> </tr> <tr> <td>:new_moon: <code class="language-plaintext highlighter-rouge">:new_moon:</code></td> <td>:waxing_crescent_moon: <code class="language-plaintext highlighter-rouge">:waxing_crescent_moon:</code></td> <td>:first_quarter_moon: <code class="language-plaintext highlighter-rouge">:first_quarter_moon:</code></td> </tr> <tr> <td>:waxing_gibbous_moon: <code class="language-plaintext highlighter-rouge">:waxing_gibbous_moon:</code></td> <td>:full_moon: <code class="language-plaintext highlighter-rouge">:full_moon:</code></td> <td>:waning_gibbous_moon: <code class="language-plaintext highlighter-rouge">:waning_gibbous_moon:</code></td> </tr> <tr> <td>:last_quarter_moon: <code class="language-plaintext highlighter-rouge">:last_quarter_moon:</code></td> <td>:waning_crescent_moon: <code class="language-plaintext highlighter-rouge">:waning_crescent_moon:</code></td> <td>:last_quarter_moon_with_face: <code class="language-plaintext highlighter-rouge">:last_quarter_moon_with_face:</code></td> </tr> <tr> <td>:first_quarter_moon_with_face: <code class="language-plaintext highlighter-rouge">:first_quarter_moon_with_face:</code></td> <td>:moon: <code class="language-plaintext highlighter-rouge">:moon:</code></td> <td>:earth_africa: <code class="language-plaintext highlighter-rouge">:earth_africa:</code></td> </tr> <tr> <td>:earth_americas: <code class="language-plaintext highlighter-rouge">:earth_americas:</code></td> <td>:earth_asia: <code class="language-plaintext highlighter-rouge">:earth_asia:</code></td> <td>:volcano: <code class="language-plaintext highlighter-rouge">:volcano:</code></td> </tr> <tr> <td>:milky_way: <code class="language-plaintext highlighter-rouge">:milky_way:</code></td> <td>:partly_sunny: <code class="language-plaintext highlighter-rouge">:partly_sunny:</code></td> <td>¬†</td> </tr> </tbody> </table> <h2 id="objects">Objects</h2> <table> <thead> <tr> <th>:bamboo: <code class="language-plaintext highlighter-rouge">:bamboo:</code></th> <th>:gift_heart: <code class="language-plaintext highlighter-rouge">:gift_heart:</code></th> <th>:dolls: <code class="language-plaintext highlighter-rouge">:dolls:</code></th> </tr> </thead> <tbody> <tr> <td>:school_satchel: <code class="language-plaintext highlighter-rouge">:school_satchel:</code></td> <td>:mortar_board: <code class="language-plaintext highlighter-rouge">:mortar_board:</code></td> <td>:flags: <code class="language-plaintext highlighter-rouge">:flags:</code></td> </tr> <tr> <td>:fireworks: <code class="language-plaintext highlighter-rouge">:fireworks:</code></td> <td>:sparkler: <code class="language-plaintext highlighter-rouge">:sparkler:</code></td> <td>:wind_chime: <code class="language-plaintext highlighter-rouge">:wind_chime:</code></td> </tr> <tr> <td>:rice_scene: <code class="language-plaintext highlighter-rouge">:rice_scene:</code></td> <td>:jack_o_lantern: <code class="language-plaintext highlighter-rouge">:jack_o_lantern:</code></td> <td>:ghost: <code class="language-plaintext highlighter-rouge">:ghost:</code></td> </tr> <tr> <td>:santa: <code class="language-plaintext highlighter-rouge">:santa:</code></td> <td>:christmas_tree: <code class="language-plaintext highlighter-rouge">:christmas_tree:</code></td> <td>:gift: <code class="language-plaintext highlighter-rouge">:gift:</code></td> </tr> <tr> <td>:bell: <code class="language-plaintext highlighter-rouge">:bell:</code></td> <td>:no_bell: <code class="language-plaintext highlighter-rouge">:no_bell:</code></td> <td>:tanabata_tree: <code class="language-plaintext highlighter-rouge">:tanabata_tree:</code></td> </tr> <tr> <td>:tada: <code class="language-plaintext highlighter-rouge">:tada:</code></td> <td>:confetti_ball: <code class="language-plaintext highlighter-rouge">:confetti_ball:</code></td> <td>:balloon: <code class="language-plaintext highlighter-rouge">:balloon:</code></td> </tr> <tr> <td>:crystal_ball: <code class="language-plaintext highlighter-rouge">:crystal_ball:</code></td> <td>:cd: <code class="language-plaintext highlighter-rouge">:cd:</code></td> <td>:dvd: <code class="language-plaintext highlighter-rouge">:dvd:</code></td> </tr> <tr> <td>:floppy_disk: <code class="language-plaintext highlighter-rouge">:floppy_disk:</code></td> <td>:camera: <code class="language-plaintext highlighter-rouge">:camera:</code></td> <td>:video_camera: <code class="language-plaintext highlighter-rouge">:video_camera:</code></td> </tr> <tr> <td>:movie_camera: <code class="language-plaintext highlighter-rouge">:movie_camera:</code></td> <td>:computer: <code class="language-plaintext highlighter-rouge">:computer:</code></td> <td>:tv: <code class="language-plaintext highlighter-rouge">:tv:</code></td> </tr> <tr> <td>:iphone: <code class="language-plaintext highlighter-rouge">:iphone:</code></td> <td>:phone: <code class="language-plaintext highlighter-rouge">:phone:</code></td> <td>:telephone: <code class="language-plaintext highlighter-rouge">:telephone:</code></td> </tr> <tr> <td>:telephone_receiver: <code class="language-plaintext highlighter-rouge">:telephone_receiver:</code></td> <td>:pager: <code class="language-plaintext highlighter-rouge">:pager:</code></td> <td>:fax: <code class="language-plaintext highlighter-rouge">:fax:</code></td> </tr> <tr> <td>:minidisc: <code class="language-plaintext highlighter-rouge">:minidisc:</code></td> <td>:vhs: <code class="language-plaintext highlighter-rouge">:vhs:</code></td> <td>:sound: <code class="language-plaintext highlighter-rouge">:sound:</code></td> </tr> <tr> <td>:speaker: <code class="language-plaintext highlighter-rouge">:speaker:</code></td> <td>:mute: <code class="language-plaintext highlighter-rouge">:mute:</code></td> <td>:loudspeaker: <code class="language-plaintext highlighter-rouge">:loudspeaker:</code></td> </tr> <tr> <td>:mega: <code class="language-plaintext highlighter-rouge">:mega:</code></td> <td>:hourglass: <code class="language-plaintext highlighter-rouge">:hourglass:</code></td> <td>:hourglass_flowing_sand: <code class="language-plaintext highlighter-rouge">:hourglass_flowing_sand:</code></td> </tr> <tr> <td>:alarm_clock: <code class="language-plaintext highlighter-rouge">:alarm_clock:</code></td> <td>:watch: <code class="language-plaintext highlighter-rouge">:watch:</code></td> <td>:radio: <code class="language-plaintext highlighter-rouge">:radio:</code></td> </tr> <tr> <td>:satellite: <code class="language-plaintext highlighter-rouge">:satellite:</code></td> <td>:loop: <code class="language-plaintext highlighter-rouge">:loop:</code></td> <td>:mag: <code class="language-plaintext highlighter-rouge">:mag:</code></td> </tr> <tr> <td>:mag_right: <code class="language-plaintext highlighter-rouge">:mag_right:</code></td> <td>:unlock: <code class="language-plaintext highlighter-rouge">:unlock:</code></td> <td>:lock: <code class="language-plaintext highlighter-rouge">:lock:</code></td> </tr> <tr> <td>:lock_with_ink_pen: <code class="language-plaintext highlighter-rouge">:lock_with_ink_pen:</code></td> <td>:closed_lock_with_key: <code class="language-plaintext highlighter-rouge">:closed_lock_with_key:</code></td> <td>:key: <code class="language-plaintext highlighter-rouge">:key:</code></td> </tr> <tr> <td>:bulb: <code class="language-plaintext highlighter-rouge">:bulb:</code></td> <td>:flashlight: <code class="language-plaintext highlighter-rouge">:flashlight:</code></td> <td>:high_brightness: <code class="language-plaintext highlighter-rouge">:high_brightness:</code></td> </tr> <tr> <td>:low_brightness: <code class="language-plaintext highlighter-rouge">:low_brightness:</code></td> <td>:electric_plug: <code class="language-plaintext highlighter-rouge">:electric_plug:</code></td> <td>:battery: <code class="language-plaintext highlighter-rouge">:battery:</code></td> </tr> <tr> <td>:calling: <code class="language-plaintext highlighter-rouge">:calling:</code></td> <td>:email: <code class="language-plaintext highlighter-rouge">:email:</code></td> <td>:mailbox: <code class="language-plaintext highlighter-rouge">:mailbox:</code></td> </tr> <tr> <td>:postbox: <code class="language-plaintext highlighter-rouge">:postbox:</code></td> <td>:bath: <code class="language-plaintext highlighter-rouge">:bath:</code></td> <td>:bathtub: <code class="language-plaintext highlighter-rouge">:bathtub:</code></td> </tr> <tr> <td>:shower: <code class="language-plaintext highlighter-rouge">:shower:</code></td> <td>:toilet: <code class="language-plaintext highlighter-rouge">:toilet:</code></td> <td>:wrench: <code class="language-plaintext highlighter-rouge">:wrench:</code></td> </tr> <tr> <td>:nut_and_bolt: <code class="language-plaintext highlighter-rouge">:nut_and_bolt:</code></td> <td>:hammer: <code class="language-plaintext highlighter-rouge">:hammer:</code></td> <td>:seat: <code class="language-plaintext highlighter-rouge">:seat:</code></td> </tr> <tr> <td>:moneybag: <code class="language-plaintext highlighter-rouge">:moneybag:</code></td> <td>:yen: <code class="language-plaintext highlighter-rouge">:yen:</code></td> <td>:dollar: <code class="language-plaintext highlighter-rouge">:dollar:</code></td> </tr> <tr> <td>:pound: <code class="language-plaintext highlighter-rouge">:pound:</code></td> <td>:euro: <code class="language-plaintext highlighter-rouge">:euro:</code></td> <td>:credit_card: <code class="language-plaintext highlighter-rouge">:credit_card:</code></td> </tr> <tr> <td>:money_with_wings: <code class="language-plaintext highlighter-rouge">:money_with_wings:</code></td> <td>:e-mail: <code class="language-plaintext highlighter-rouge">:e-mail:</code></td> <td>:inbox_tray: <code class="language-plaintext highlighter-rouge">:inbox_tray:</code></td> </tr> <tr> <td>:outbox_tray: <code class="language-plaintext highlighter-rouge">:outbox_tray:</code></td> <td>:envelope: <code class="language-plaintext highlighter-rouge">:envelope:</code></td> <td>:incoming_envelope: <code class="language-plaintext highlighter-rouge">:incoming_envelope:</code></td> </tr> <tr> <td>:postal_horn: <code class="language-plaintext highlighter-rouge">:postal_horn:</code></td> <td>:mailbox_closed: <code class="language-plaintext highlighter-rouge">:mailbox_closed:</code></td> <td>:mailbox_with_mail: <code class="language-plaintext highlighter-rouge">:mailbox_with_mail:</code></td> </tr> <tr> <td>:mailbox_with_no_mail: <code class="language-plaintext highlighter-rouge">:mailbox_with_no_mail:</code></td> <td>:door: <code class="language-plaintext highlighter-rouge">:door:</code></td> <td>:smoking: <code class="language-plaintext highlighter-rouge">:smoking:</code></td> </tr> <tr> <td>:bomb: <code class="language-plaintext highlighter-rouge">:bomb:</code></td> <td>:gun: <code class="language-plaintext highlighter-rouge">:gun:</code></td> <td>:hocho: <code class="language-plaintext highlighter-rouge">:hocho:</code></td> </tr> <tr> <td>:pill: <code class="language-plaintext highlighter-rouge">:pill:</code></td> <td>:syringe: <code class="language-plaintext highlighter-rouge">:syringe:</code></td> <td>:page_facing_up: <code class="language-plaintext highlighter-rouge">:page_facing_up:</code></td> </tr> <tr> <td>:page_with_curl: <code class="language-plaintext highlighter-rouge">:page_with_curl:</code></td> <td>:bookmark_tabs: <code class="language-plaintext highlighter-rouge">:bookmark_tabs:</code></td> <td>:bar_chart: <code class="language-plaintext highlighter-rouge">:bar_chart:</code></td> </tr> <tr> <td>:chart_with_upwards_trend: <code class="language-plaintext highlighter-rouge">:chart_with_upwards_trend:</code></td> <td>:chart_with_downwards_trend: <code class="language-plaintext highlighter-rouge">:chart_with_downwards_trend:</code></td> <td>:scroll: <code class="language-plaintext highlighter-rouge">:scroll:</code></td> </tr> <tr> <td>:clipboard: <code class="language-plaintext highlighter-rouge">:clipboard:</code></td> <td>:calendar: <code class="language-plaintext highlighter-rouge">:calendar:</code></td> <td>:date: <code class="language-plaintext highlighter-rouge">:date:</code></td> </tr> <tr> <td>:card_index: <code class="language-plaintext highlighter-rouge">:card_index:</code></td> <td>:file_folder: <code class="language-plaintext highlighter-rouge">:file_folder:</code></td> <td>:open_file_folder: <code class="language-plaintext highlighter-rouge">:open_file_folder:</code></td> </tr> <tr> <td>:scissors: <code class="language-plaintext highlighter-rouge">:scissors:</code></td> <td>:pushpin: <code class="language-plaintext highlighter-rouge">:pushpin:</code></td> <td>:paperclip: <code class="language-plaintext highlighter-rouge">:paperclip:</code></td> </tr> <tr> <td>:black_nib: <code class="language-plaintext highlighter-rouge">:black_nib:</code></td> <td>:pencil2: <code class="language-plaintext highlighter-rouge">:pencil2:</code></td> <td>:straight_ruler: <code class="language-plaintext highlighter-rouge">:straight_ruler:</code></td> </tr> <tr> <td>:triangular_ruler: <code class="language-plaintext highlighter-rouge">:triangular_ruler:</code></td> <td>:closed_book: <code class="language-plaintext highlighter-rouge">:closed_book:</code></td> <td>:green_book: <code class="language-plaintext highlighter-rouge">:green_book:</code></td> </tr> <tr> <td>:blue_book: <code class="language-plaintext highlighter-rouge">:blue_book:</code></td> <td>:orange_book: <code class="language-plaintext highlighter-rouge">:orange_book:</code></td> <td>:notebook: <code class="language-plaintext highlighter-rouge">:notebook:</code></td> </tr> <tr> <td>:notebook_with_decorative_cover: <code class="language-plaintext highlighter-rouge">:notebook_with_decorative_cover:</code></td> <td>:ledger: <code class="language-plaintext highlighter-rouge">:ledger:</code></td> <td>:books: <code class="language-plaintext highlighter-rouge">:books:</code></td> </tr> <tr> <td>:bookmark: <code class="language-plaintext highlighter-rouge">:bookmark:</code></td> <td>:name_badge: <code class="language-plaintext highlighter-rouge">:name_badge:</code></td> <td>:microscope: <code class="language-plaintext highlighter-rouge">:microscope:</code></td> </tr> <tr> <td>:telescope: <code class="language-plaintext highlighter-rouge">:telescope:</code></td> <td>:newspaper: <code class="language-plaintext highlighter-rouge">:newspaper:</code></td> <td>:football: <code class="language-plaintext highlighter-rouge">:football:</code></td> </tr> <tr> <td>:basketball: <code class="language-plaintext highlighter-rouge">:basketball:</code></td> <td>:soccer: <code class="language-plaintext highlighter-rouge">:soccer:</code></td> <td>:baseball: <code class="language-plaintext highlighter-rouge">:baseball:</code></td> </tr> <tr> <td>:tennis: <code class="language-plaintext highlighter-rouge">:tennis:</code></td> <td>:8ball: <code class="language-plaintext highlighter-rouge">:8ball:</code></td> <td>:rugby_football: <code class="language-plaintext highlighter-rouge">:rugby_football:</code></td> </tr> <tr> <td>:bowling: <code class="language-plaintext highlighter-rouge">:bowling:</code></td> <td>:golf: <code class="language-plaintext highlighter-rouge">:golf:</code></td> <td>:mountain_bicyclist: <code class="language-plaintext highlighter-rouge">:mountain_bicyclist:</code></td> </tr> <tr> <td>:bicyclist: <code class="language-plaintext highlighter-rouge">:bicyclist:</code></td> <td>:horse_racing: <code class="language-plaintext highlighter-rouge">:horse_racing:</code></td> <td>:snowboarder: <code class="language-plaintext highlighter-rouge">:snowboarder:</code></td> </tr> <tr> <td>:swimmer: <code class="language-plaintext highlighter-rouge">:swimmer:</code></td> <td>:surfer: <code class="language-plaintext highlighter-rouge">:surfer:</code></td> <td>:ski: <code class="language-plaintext highlighter-rouge">:ski:</code></td> </tr> <tr> <td>:spades: <code class="language-plaintext highlighter-rouge">:spades:</code></td> <td>:hearts: <code class="language-plaintext highlighter-rouge">:hearts:</code></td> <td>:clubs: <code class="language-plaintext highlighter-rouge">:clubs:</code></td> </tr> <tr> <td>:diamonds: <code class="language-plaintext highlighter-rouge">:diamonds:</code></td> <td>:gem: <code class="language-plaintext highlighter-rouge">:gem:</code></td> <td>:ring: <code class="language-plaintext highlighter-rouge">:ring:</code></td> </tr> <tr> <td>:trophy: <code class="language-plaintext highlighter-rouge">:trophy:</code></td> <td>:musical_score: <code class="language-plaintext highlighter-rouge">:musical_score:</code></td> <td>:musical_keyboard: <code class="language-plaintext highlighter-rouge">:musical_keyboard:</code></td> </tr> <tr> <td>:violin: <code class="language-plaintext highlighter-rouge">:violin:</code></td> <td>:space_invader: <code class="language-plaintext highlighter-rouge">:space_invader:</code></td> <td>:video_game: <code class="language-plaintext highlighter-rouge">:video_game:</code></td> </tr> <tr> <td>:black_joker: <code class="language-plaintext highlighter-rouge">:black_joker:</code></td> <td>:flower_playing_cards: <code class="language-plaintext highlighter-rouge">:flower_playing_cards:</code></td> <td>:game_die: <code class="language-plaintext highlighter-rouge">:game_die:</code></td> </tr> <tr> <td>:dart: <code class="language-plaintext highlighter-rouge">:dart:</code></td> <td>:mahjong: <code class="language-plaintext highlighter-rouge">:mahjong:</code></td> <td>:clapper: <code class="language-plaintext highlighter-rouge">:clapper:</code></td> </tr> <tr> <td>:memo: <code class="language-plaintext highlighter-rouge">:memo:</code></td> <td>:pencil: <code class="language-plaintext highlighter-rouge">:pencil:</code></td> <td>:book: <code class="language-plaintext highlighter-rouge">:book:</code></td> </tr> <tr> <td>:art: <code class="language-plaintext highlighter-rouge">:art:</code></td> <td>:microphone: <code class="language-plaintext highlighter-rouge">:microphone:</code></td> <td>:headphones: <code class="language-plaintext highlighter-rouge">:headphones:</code></td> </tr> <tr> <td>:trumpet: <code class="language-plaintext highlighter-rouge">:trumpet:</code></td> <td>:saxophone: <code class="language-plaintext highlighter-rouge">:saxophone:</code></td> <td>:guitar: <code class="language-plaintext highlighter-rouge">:guitar:</code></td> </tr> <tr> <td>:shoe: <code class="language-plaintext highlighter-rouge">:shoe:</code></td> <td>:sandal: <code class="language-plaintext highlighter-rouge">:sandal:</code></td> <td>:high_heel: <code class="language-plaintext highlighter-rouge">:high_heel:</code></td> </tr> <tr> <td>:lipstick: <code class="language-plaintext highlighter-rouge">:lipstick:</code></td> <td>:boot: <code class="language-plaintext highlighter-rouge">:boot:</code></td> <td>:shirt: <code class="language-plaintext highlighter-rouge">:shirt:</code></td> </tr> <tr> <td>:tshirt: <code class="language-plaintext highlighter-rouge">:tshirt:</code></td> <td>:necktie: <code class="language-plaintext highlighter-rouge">:necktie:</code></td> <td>:womans_clothes: <code class="language-plaintext highlighter-rouge">:womans_clothes:</code></td> </tr> <tr> <td>:dress: <code class="language-plaintext highlighter-rouge">:dress:</code></td> <td>:running_shirt_with_sash: <code class="language-plaintext highlighter-rouge">:running_shirt_with_sash:</code></td> <td>:jeans: <code class="language-plaintext highlighter-rouge">:jeans:</code></td> </tr> <tr> <td>:kimono: <code class="language-plaintext highlighter-rouge">:kimono:</code></td> <td>:bikini: <code class="language-plaintext highlighter-rouge">:bikini:</code></td> <td>:ribbon: <code class="language-plaintext highlighter-rouge">:ribbon:</code></td> </tr> <tr> <td>:tophat: <code class="language-plaintext highlighter-rouge">:tophat:</code></td> <td>:crown: <code class="language-plaintext highlighter-rouge">:crown:</code></td> <td>:womans_hat: <code class="language-plaintext highlighter-rouge">:womans_hat:</code></td> </tr> <tr> <td>:mans_shoe: <code class="language-plaintext highlighter-rouge">:mans_shoe:</code></td> <td>:closed_umbrella: <code class="language-plaintext highlighter-rouge">:closed_umbrella:</code></td> <td>:briefcase: <code class="language-plaintext highlighter-rouge">:briefcase:</code></td> </tr> <tr> <td>:handbag: <code class="language-plaintext highlighter-rouge">:handbag:</code></td> <td>:pouch: <code class="language-plaintext highlighter-rouge">:pouch:</code></td> <td>:purse: <code class="language-plaintext highlighter-rouge">:purse:</code></td> </tr> <tr> <td>:eyeglasses: <code class="language-plaintext highlighter-rouge">:eyeglasses:</code></td> <td>:fishing_pole_and_fish: <code class="language-plaintext highlighter-rouge">:fishing_pole_and_fish:</code></td> <td>:coffee: <code class="language-plaintext highlighter-rouge">:coffee:</code></td> </tr> <tr> <td>:tea: <code class="language-plaintext highlighter-rouge">:tea:</code></td> <td>:sake: <code class="language-plaintext highlighter-rouge">:sake:</code></td> <td>:baby_bottle: <code class="language-plaintext highlighter-rouge">:baby_bottle:</code></td> </tr> <tr> <td>:beer: <code class="language-plaintext highlighter-rouge">:beer:</code></td> <td>:beers: <code class="language-plaintext highlighter-rouge">:beers:</code></td> <td>:cocktail: <code class="language-plaintext highlighter-rouge">:cocktail:</code></td> </tr> <tr> <td>:tropical_drink: <code class="language-plaintext highlighter-rouge">:tropical_drink:</code></td> <td>:wine_glass: <code class="language-plaintext highlighter-rouge">:wine_glass:</code></td> <td>:fork_and_knife: <code class="language-plaintext highlighter-rouge">:fork_and_knife:</code></td> </tr> <tr> <td>:pizza: <code class="language-plaintext highlighter-rouge">:pizza:</code></td> <td>:hamburger: <code class="language-plaintext highlighter-rouge">:hamburger:</code></td> <td>:fries: <code class="language-plaintext highlighter-rouge">:fries:</code></td> </tr> <tr> <td>:poultry_leg: <code class="language-plaintext highlighter-rouge">:poultry_leg:</code></td> <td>:meat_on_bone: <code class="language-plaintext highlighter-rouge">:meat_on_bone:</code></td> <td>:spaghetti: <code class="language-plaintext highlighter-rouge">:spaghetti:</code></td> </tr> <tr> <td>:curry: <code class="language-plaintext highlighter-rouge">:curry:</code></td> <td>:fried_shrimp: <code class="language-plaintext highlighter-rouge">:fried_shrimp:</code></td> <td>:bento: <code class="language-plaintext highlighter-rouge">:bento:</code></td> </tr> <tr> <td>:sushi: <code class="language-plaintext highlighter-rouge">:sushi:</code></td> <td>:fish_cake: <code class="language-plaintext highlighter-rouge">:fish_cake:</code></td> <td>:rice_ball: <code class="language-plaintext highlighter-rouge">:rice_ball:</code></td> </tr> <tr> <td>:rice_cracker: <code class="language-plaintext highlighter-rouge">:rice_cracker:</code></td> <td>:rice: <code class="language-plaintext highlighter-rouge">:rice:</code></td> <td>:ramen: <code class="language-plaintext highlighter-rouge">:ramen:</code></td> </tr> <tr> <td>:stew: <code class="language-plaintext highlighter-rouge">:stew:</code></td> <td>:oden: <code class="language-plaintext highlighter-rouge">:oden:</code></td> <td>:dango: <code class="language-plaintext highlighter-rouge">:dango:</code></td> </tr> <tr> <td>:egg: <code class="language-plaintext highlighter-rouge">:egg:</code></td> <td>:bread: <code class="language-plaintext highlighter-rouge">:bread:</code></td> <td>:doughnut: <code class="language-plaintext highlighter-rouge">:doughnut:</code></td> </tr> <tr> <td>:custard: <code class="language-plaintext highlighter-rouge">:custard:</code></td> <td>:icecream: <code class="language-plaintext highlighter-rouge">:icecream:</code></td> <td>:ice_cream: <code class="language-plaintext highlighter-rouge">:ice_cream:</code></td> </tr> <tr> <td>:shaved_ice: <code class="language-plaintext highlighter-rouge">:shaved_ice:</code></td> <td>:birthday: <code class="language-plaintext highlighter-rouge">:birthday:</code></td> <td>:cake: <code class="language-plaintext highlighter-rouge">:cake:</code></td> </tr> <tr> <td>:cookie: <code class="language-plaintext highlighter-rouge">:cookie:</code></td> <td>:chocolate_bar: <code class="language-plaintext highlighter-rouge">:chocolate_bar:</code></td> <td>:candy: <code class="language-plaintext highlighter-rouge">:candy:</code></td> </tr> <tr> <td>:lollipop: <code class="language-plaintext highlighter-rouge">:lollipop:</code></td> <td>:honey_pot: <code class="language-plaintext highlighter-rouge">:honey_pot:</code></td> <td>:apple: <code class="language-plaintext highlighter-rouge">:apple:</code></td> </tr> <tr> <td>:green_apple: <code class="language-plaintext highlighter-rouge">:green_apple:</code></td> <td>:tangerine: <code class="language-plaintext highlighter-rouge">:tangerine:</code></td> <td>:lemon: <code class="language-plaintext highlighter-rouge">:lemon:</code></td> </tr> <tr> <td>:cherries: <code class="language-plaintext highlighter-rouge">:cherries:</code></td> <td>:grapes: <code class="language-plaintext highlighter-rouge">:grapes:</code></td> <td>:watermelon: <code class="language-plaintext highlighter-rouge">:watermelon:</code></td> </tr> <tr> <td>:strawberry: <code class="language-plaintext highlighter-rouge">:strawberry:</code></td> <td>:peach: <code class="language-plaintext highlighter-rouge">:peach:</code></td> <td>:melon: <code class="language-plaintext highlighter-rouge">:melon:</code></td> </tr> <tr> <td>:banana: <code class="language-plaintext highlighter-rouge">:banana:</code></td> <td>:pear: <code class="language-plaintext highlighter-rouge">:pear:</code></td> <td>:pineapple: <code class="language-plaintext highlighter-rouge">:pineapple:</code></td> </tr> <tr> <td>:sweet_potato: <code class="language-plaintext highlighter-rouge">:sweet_potato:</code></td> <td>:eggplant: <code class="language-plaintext highlighter-rouge">:eggplant:</code></td> <td>:tomato: <code class="language-plaintext highlighter-rouge">:tomato:</code></td> </tr> <tr> <td>:corn: <code class="language-plaintext highlighter-rouge">:corn:</code></td> <td>¬†</td> <td>¬†</td> </tr> </tbody> </table> <h2 id="places">Places</h2> <table> <thead> <tr> <th>:house: <code class="language-plaintext highlighter-rouge">:house:</code></th> <th>:house_with_garden: <code class="language-plaintext highlighter-rouge">:house_with_garden:</code></th> <th>:school: <code class="language-plaintext highlighter-rouge">:school:</code></th> </tr> </thead> <tbody> <tr> <td>:office: <code class="language-plaintext highlighter-rouge">:office:</code></td> <td>:post_office: <code class="language-plaintext highlighter-rouge">:post_office:</code></td> <td>:hospital: <code class="language-plaintext highlighter-rouge">:hospital:</code></td> </tr> <tr> <td>:bank: <code class="language-plaintext highlighter-rouge">:bank:</code></td> <td>:convenience_store: <code class="language-plaintext highlighter-rouge">:convenience_store:</code></td> <td>:love_hotel: <code class="language-plaintext highlighter-rouge">:love_hotel:</code></td> </tr> <tr> <td>:hotel: <code class="language-plaintext highlighter-rouge">:hotel:</code></td> <td>:wedding: <code class="language-plaintext highlighter-rouge">:wedding:</code></td> <td>:church: <code class="language-plaintext highlighter-rouge">:church:</code></td> </tr> <tr> <td>:department_store: <code class="language-plaintext highlighter-rouge">:department_store:</code></td> <td>:european_post_office: <code class="language-plaintext highlighter-rouge">:european_post_office:</code></td> <td>:city_sunrise: <code class="language-plaintext highlighter-rouge">:city_sunrise:</code></td> </tr> <tr> <td>:city_sunset: <code class="language-plaintext highlighter-rouge">:city_sunset:</code></td> <td>:japanese_castle: <code class="language-plaintext highlighter-rouge">:japanese_castle:</code></td> <td>:european_castle: <code class="language-plaintext highlighter-rouge">:european_castle:</code></td> </tr> <tr> <td>:tent: <code class="language-plaintext highlighter-rouge">:tent:</code></td> <td>:factory: <code class="language-plaintext highlighter-rouge">:factory:</code></td> <td>:tokyo_tower: <code class="language-plaintext highlighter-rouge">:tokyo_tower:</code></td> </tr> <tr> <td>:japan: <code class="language-plaintext highlighter-rouge">:japan:</code></td> <td>:mount_fuji: <code class="language-plaintext highlighter-rouge">:mount_fuji:</code></td> <td>:sunrise_over_mountains: <code class="language-plaintext highlighter-rouge">:sunrise_over_mountains:</code></td> </tr> <tr> <td>:sunrise: <code class="language-plaintext highlighter-rouge">:sunrise:</code></td> <td>:stars: <code class="language-plaintext highlighter-rouge">:stars:</code></td> <td>:statue_of_liberty: <code class="language-plaintext highlighter-rouge">:statue_of_liberty:</code></td> </tr> <tr> <td>:bridge_at_night: <code class="language-plaintext highlighter-rouge">:bridge_at_night:</code></td> <td>:carousel_horse: <code class="language-plaintext highlighter-rouge">:carousel_horse:</code></td> <td>:rainbow: <code class="language-plaintext highlighter-rouge">:rainbow:</code></td> </tr> <tr> <td>:ferris_wheel: <code class="language-plaintext highlighter-rouge">:ferris_wheel:</code></td> <td>:fountain: <code class="language-plaintext highlighter-rouge">:fountain:</code></td> <td>:roller_coaster: <code class="language-plaintext highlighter-rouge">:roller_coaster:</code></td> </tr> <tr> <td>:ship: <code class="language-plaintext highlighter-rouge">:ship:</code></td> <td>:speedboat: <code class="language-plaintext highlighter-rouge">:speedboat:</code></td> <td>:boat: <code class="language-plaintext highlighter-rouge">:boat:</code></td> </tr> <tr> <td>:sailboat: <code class="language-plaintext highlighter-rouge">:sailboat:</code></td> <td>:rowboat: <code class="language-plaintext highlighter-rouge">:rowboat:</code></td> <td>:anchor: <code class="language-plaintext highlighter-rouge">:anchor:</code></td> </tr> <tr> <td>:rocket: <code class="language-plaintext highlighter-rouge">:rocket:</code></td> <td>:airplane: <code class="language-plaintext highlighter-rouge">:airplane:</code></td> <td>:helicopter: <code class="language-plaintext highlighter-rouge">:helicopter:</code></td> </tr> <tr> <td>:steam_locomotive: <code class="language-plaintext highlighter-rouge">:steam_locomotive:</code></td> <td>:tram: <code class="language-plaintext highlighter-rouge">:tram:</code></td> <td>:mountain_railway: <code class="language-plaintext highlighter-rouge">:mountain_railway:</code></td> </tr> <tr> <td>:bike: <code class="language-plaintext highlighter-rouge">:bike:</code></td> <td>:aerial_tramway: <code class="language-plaintext highlighter-rouge">:aerial_tramway:</code></td> <td>:suspension_railway: <code class="language-plaintext highlighter-rouge">:suspension_railway:</code></td> </tr> <tr> <td>:mountain_cableway: <code class="language-plaintext highlighter-rouge">:mountain_cableway:</code></td> <td>:tractor: <code class="language-plaintext highlighter-rouge">:tractor:</code></td> <td>:blue_car: <code class="language-plaintext highlighter-rouge">:blue_car:</code></td> </tr> <tr> <td>:oncoming_automobile: <code class="language-plaintext highlighter-rouge">:oncoming_automobile:</code></td> <td>:car: <code class="language-plaintext highlighter-rouge">:car:</code></td> <td>:red_car: <code class="language-plaintext highlighter-rouge">:red_car:</code></td> </tr> <tr> <td>:taxi: <code class="language-plaintext highlighter-rouge">:taxi:</code></td> <td>:oncoming_taxi: <code class="language-plaintext highlighter-rouge">:oncoming_taxi:</code></td> <td>:articulated_lorry: <code class="language-plaintext highlighter-rouge">:articulated_lorry:</code></td> </tr> <tr> <td>:bus: <code class="language-plaintext highlighter-rouge">:bus:</code></td> <td>:oncoming_bus: <code class="language-plaintext highlighter-rouge">:oncoming_bus:</code></td> <td>:rotating_light: <code class="language-plaintext highlighter-rouge">:rotating_light:</code></td> </tr> <tr> <td>:police_car: <code class="language-plaintext highlighter-rouge">:police_car:</code></td> <td>:oncoming_police_car: <code class="language-plaintext highlighter-rouge">:oncoming_police_car:</code></td> <td>:fire_engine: <code class="language-plaintext highlighter-rouge">:fire_engine:</code></td> </tr> <tr> <td>:ambulance: <code class="language-plaintext highlighter-rouge">:ambulance:</code></td> <td>:minibus: <code class="language-plaintext highlighter-rouge">:minibus:</code></td> <td>:truck: <code class="language-plaintext highlighter-rouge">:truck:</code></td> </tr> <tr> <td>:train: <code class="language-plaintext highlighter-rouge">:train:</code></td> <td>:station: <code class="language-plaintext highlighter-rouge">:station:</code></td> <td>:train2: <code class="language-plaintext highlighter-rouge">:train2:</code></td> </tr> <tr> <td>:bullettrain_front: <code class="language-plaintext highlighter-rouge">:bullettrain_front:</code></td> <td>:bullettrain_side: <code class="language-plaintext highlighter-rouge">:bullettrain_side:</code></td> <td>:light_rail: <code class="language-plaintext highlighter-rouge">:light_rail:</code></td> </tr> <tr> <td>:monorail: <code class="language-plaintext highlighter-rouge">:monorail:</code></td> <td>:railway_car: <code class="language-plaintext highlighter-rouge">:railway_car:</code></td> <td>:trolleybus: <code class="language-plaintext highlighter-rouge">:trolleybus:</code></td> </tr> <tr> <td>:ticket: <code class="language-plaintext highlighter-rouge">:ticket:</code></td> <td>:fuelpump: <code class="language-plaintext highlighter-rouge">:fuelpump:</code></td> <td>:vertical_traffic_light: <code class="language-plaintext highlighter-rouge">:vertical_traffic_light:</code></td> </tr> <tr> <td>:traffic_light: <code class="language-plaintext highlighter-rouge">:traffic_light:</code></td> <td>:warning: <code class="language-plaintext highlighter-rouge">:warning:</code></td> <td>:construction: <code class="language-plaintext highlighter-rouge">:construction:</code></td> </tr> <tr> <td>:beginner: <code class="language-plaintext highlighter-rouge">:beginner:</code></td> <td>:atm: <code class="language-plaintext highlighter-rouge">:atm:</code></td> <td>:slot_machine: <code class="language-plaintext highlighter-rouge">:slot_machine:</code></td> </tr> <tr> <td>:busstop: <code class="language-plaintext highlighter-rouge">:busstop:</code></td> <td>:barber: <code class="language-plaintext highlighter-rouge">:barber:</code></td> <td>:hotsprings: <code class="language-plaintext highlighter-rouge">:hotsprings:</code></td> </tr> <tr> <td>:checkered_flag: <code class="language-plaintext highlighter-rouge">:checkered_flag:</code></td> <td>:crossed_flags: <code class="language-plaintext highlighter-rouge">:crossed_flags:</code></td> <td>:izakaya_lantern: <code class="language-plaintext highlighter-rouge">:izakaya_lantern:</code></td> </tr> <tr> <td>:moyai: <code class="language-plaintext highlighter-rouge">:moyai:</code></td> <td>:circus_tent: <code class="language-plaintext highlighter-rouge">:circus_tent:</code></td> <td>:performing_arts: <code class="language-plaintext highlighter-rouge">:performing_arts:</code></td> </tr> <tr> <td>:round_pushpin: <code class="language-plaintext highlighter-rouge">:round_pushpin:</code></td> <td>:triangular_flag_on_post: <code class="language-plaintext highlighter-rouge">:triangular_flag_on_post:</code></td> <td>:jp: <code class="language-plaintext highlighter-rouge">:jp:</code></td> </tr> <tr> <td>:kr: <code class="language-plaintext highlighter-rouge">:kr:</code></td> <td>:cn: <code class="language-plaintext highlighter-rouge">:cn:</code></td> <td>:us: <code class="language-plaintext highlighter-rouge">:us:</code></td> </tr> <tr> <td>:fr: <code class="language-plaintext highlighter-rouge">:fr:</code></td> <td>:es: <code class="language-plaintext highlighter-rouge">:es:</code></td> <td>:it: <code class="language-plaintext highlighter-rouge">:it:</code></td> </tr> <tr> <td>:ru: <code class="language-plaintext highlighter-rouge">:ru:</code></td> <td>:gb: <code class="language-plaintext highlighter-rouge">:gb:</code></td> <td>:uk: <code class="language-plaintext highlighter-rouge">:uk:</code></td> </tr> <tr> <td>:de: <code class="language-plaintext highlighter-rouge">:de:</code></td> <td>¬†</td> <td>¬†</td> </tr> </tbody> </table> <h2 id="symbols">Symbols</h2> <table> <thead> <tr> <th>:one: <code class="language-plaintext highlighter-rouge">:one:</code></th> <th>:two: <code class="language-plaintext highlighter-rouge">:two:</code></th> <th>:three: <code class="language-plaintext highlighter-rouge">:three:</code></th> </tr> </thead> <tbody> <tr> <td>:four: <code class="language-plaintext highlighter-rouge">:four:</code></td> <td>:five: <code class="language-plaintext highlighter-rouge">:five:</code></td> <td>:six: <code class="language-plaintext highlighter-rouge">:six:</code></td> </tr> <tr> <td>:seven: <code class="language-plaintext highlighter-rouge">:seven:</code></td> <td>:eight: <code class="language-plaintext highlighter-rouge">:eight:</code></td> <td>:nine: <code class="language-plaintext highlighter-rouge">:nine:</code></td> </tr> <tr> <td>:keycap_ten: <code class="language-plaintext highlighter-rouge">:keycap_ten:</code></td> <td>:1234: <code class="language-plaintext highlighter-rouge">:1234:</code></td> <td>:zero: <code class="language-plaintext highlighter-rouge">:zero:</code></td> </tr> <tr> <td>:hash: <code class="language-plaintext highlighter-rouge">:hash:</code></td> <td>:symbols: <code class="language-plaintext highlighter-rouge">:symbols:</code></td> <td>:arrow_backward: <code class="language-plaintext highlighter-rouge">:arrow_backward:</code></td> </tr> <tr> <td>:arrow_down: <code class="language-plaintext highlighter-rouge">:arrow_down:</code></td> <td>:arrow_forward: <code class="language-plaintext highlighter-rouge">:arrow_forward:</code></td> <td>:arrow_left: <code class="language-plaintext highlighter-rouge">:arrow_left:</code></td> </tr> <tr> <td>:capital_abcd: <code class="language-plaintext highlighter-rouge">:capital_abcd:</code></td> <td>:abcd: <code class="language-plaintext highlighter-rouge">:abcd:</code></td> <td>:abc: <code class="language-plaintext highlighter-rouge">:abc:</code></td> </tr> <tr> <td>:arrow_lower_left: <code class="language-plaintext highlighter-rouge">:arrow_lower_left:</code></td> <td>:arrow_lower_right: <code class="language-plaintext highlighter-rouge">:arrow_lower_right:</code></td> <td>:arrow_right: <code class="language-plaintext highlighter-rouge">:arrow_right:</code></td> </tr> <tr> <td>:arrow_up: <code class="language-plaintext highlighter-rouge">:arrow_up:</code></td> <td>:arrow_upper_left: <code class="language-plaintext highlighter-rouge">:arrow_upper_left:</code></td> <td>:arrow_upper_right: <code class="language-plaintext highlighter-rouge">:arrow_upper_right:</code></td> </tr> <tr> <td>:arrow_double_down: <code class="language-plaintext highlighter-rouge">:arrow_double_down:</code></td> <td>:arrow_double_up: <code class="language-plaintext highlighter-rouge">:arrow_double_up:</code></td> <td>:arrow_down_small: <code class="language-plaintext highlighter-rouge">:arrow_down_small:</code></td> </tr> <tr> <td>:arrow_heading_down: <code class="language-plaintext highlighter-rouge">:arrow_heading_down:</code></td> <td>:arrow_heading_up: <code class="language-plaintext highlighter-rouge">:arrow_heading_up:</code></td> <td>:leftwards_arrow_with_hook: <code class="language-plaintext highlighter-rouge">:leftwards_arrow_with_hook:</code></td> </tr> <tr> <td>:arrow_right_hook: <code class="language-plaintext highlighter-rouge">:arrow_right_hook:</code></td> <td>:left_right_arrow: <code class="language-plaintext highlighter-rouge">:left_right_arrow:</code></td> <td>:arrow_up_down: <code class="language-plaintext highlighter-rouge">:arrow_up_down:</code></td> </tr> <tr> <td>:arrow_up_small: <code class="language-plaintext highlighter-rouge">:arrow_up_small:</code></td> <td>:arrows_clockwise: <code class="language-plaintext highlighter-rouge">:arrows_clockwise:</code></td> <td>:arrows_counterclockwise: <code class="language-plaintext highlighter-rouge">:arrows_counterclockwise:</code></td> </tr> <tr> <td>:rewind: <code class="language-plaintext highlighter-rouge">:rewind:</code></td> <td>:fast_forward: <code class="language-plaintext highlighter-rouge">:fast_forward:</code></td> <td>:information_source: <code class="language-plaintext highlighter-rouge">:information_source:</code></td> </tr> <tr> <td>:ok: <code class="language-plaintext highlighter-rouge">:ok:</code></td> <td>:twisted_rightwards_arrows: <code class="language-plaintext highlighter-rouge">:twisted_rightwards_arrows:</code></td> <td>:repeat: <code class="language-plaintext highlighter-rouge">:repeat:</code></td> </tr> <tr> <td>:repeat_one: <code class="language-plaintext highlighter-rouge">:repeat_one:</code></td> <td>:new: <code class="language-plaintext highlighter-rouge">:new:</code></td> <td>:top: <code class="language-plaintext highlighter-rouge">:top:</code></td> </tr> <tr> <td>:up: <code class="language-plaintext highlighter-rouge">:up:</code></td> <td>:cool: <code class="language-plaintext highlighter-rouge">:cool:</code></td> <td>:free: <code class="language-plaintext highlighter-rouge">:free:</code></td> </tr> <tr> <td>:ng: <code class="language-plaintext highlighter-rouge">:ng:</code></td> <td>:cinema: <code class="language-plaintext highlighter-rouge">:cinema:</code></td> <td>:koko: <code class="language-plaintext highlighter-rouge">:koko:</code></td> </tr> <tr> <td>:signal_strength: <code class="language-plaintext highlighter-rouge">:signal_strength:</code></td> <td>:u5272: <code class="language-plaintext highlighter-rouge">:u5272:</code></td> <td>:u5408: <code class="language-plaintext highlighter-rouge">:u5408:</code></td> </tr> <tr> <td>:u55b6: <code class="language-plaintext highlighter-rouge">:u55b6:</code></td> <td>:u6307: <code class="language-plaintext highlighter-rouge">:u6307:</code></td> <td>:u6708: <code class="language-plaintext highlighter-rouge">:u6708:</code></td> </tr> <tr> <td>:u6709: <code class="language-plaintext highlighter-rouge">:u6709:</code></td> <td>:u6e80: <code class="language-plaintext highlighter-rouge">:u6e80:</code></td> <td>:u7121: <code class="language-plaintext highlighter-rouge">:u7121:</code></td> </tr> <tr> <td>:u7533: <code class="language-plaintext highlighter-rouge">:u7533:</code></td> <td>:u7a7a: <code class="language-plaintext highlighter-rouge">:u7a7a:</code></td> <td>:u7981: <code class="language-plaintext highlighter-rouge">:u7981:</code></td> </tr> <tr> <td>:sa: <code class="language-plaintext highlighter-rouge">:sa:</code></td> <td>:restroom: <code class="language-plaintext highlighter-rouge">:restroom:</code></td> <td>:mens: <code class="language-plaintext highlighter-rouge">:mens:</code></td> </tr> <tr> <td>:womens: <code class="language-plaintext highlighter-rouge">:womens:</code></td> <td>:baby_symbol: <code class="language-plaintext highlighter-rouge">:baby_symbol:</code></td> <td>:no_smoking: <code class="language-plaintext highlighter-rouge">:no_smoking:</code></td> </tr> <tr> <td>:parking: <code class="language-plaintext highlighter-rouge">:parking:</code></td> <td>:wheelchair: <code class="language-plaintext highlighter-rouge">:wheelchair:</code></td> <td>:metro: <code class="language-plaintext highlighter-rouge">:metro:</code></td> </tr> <tr> <td>:baggage_claim: <code class="language-plaintext highlighter-rouge">:baggage_claim:</code></td> <td>:accept: <code class="language-plaintext highlighter-rouge">:accept:</code></td> <td>:wc: <code class="language-plaintext highlighter-rouge">:wc:</code></td> </tr> <tr> <td>:potable_water: <code class="language-plaintext highlighter-rouge">:potable_water:</code></td> <td>:put_litter_in_its_place: <code class="language-plaintext highlighter-rouge">:put_litter_in_its_place:</code></td> <td>:secret: <code class="language-plaintext highlighter-rouge">:secret:</code></td> </tr> <tr> <td>:congratulations: <code class="language-plaintext highlighter-rouge">:congratulations:</code></td> <td>:m: <code class="language-plaintext highlighter-rouge">:m:</code></td> <td>:passport_control: <code class="language-plaintext highlighter-rouge">:passport_control:</code></td> </tr> <tr> <td>:left_luggage: <code class="language-plaintext highlighter-rouge">:left_luggage:</code></td> <td>:customs: <code class="language-plaintext highlighter-rouge">:customs:</code></td> <td>:ideograph_advantage: <code class="language-plaintext highlighter-rouge">:ideograph_advantage:</code></td> </tr> <tr> <td>:cl: <code class="language-plaintext highlighter-rouge">:cl:</code></td> <td>:sos: <code class="language-plaintext highlighter-rouge">:sos:</code></td> <td>:id: <code class="language-plaintext highlighter-rouge">:id:</code></td> </tr> <tr> <td>:no_entry_sign: <code class="language-plaintext highlighter-rouge">:no_entry_sign:</code></td> <td>:underage: <code class="language-plaintext highlighter-rouge">:underage:</code></td> <td>:no_mobile_phones: <code class="language-plaintext highlighter-rouge">:no_mobile_phones:</code></td> </tr> <tr> <td>:do_not_litter: <code class="language-plaintext highlighter-rouge">:do_not_litter:</code></td> <td>:non-potable_water: <code class="language-plaintext highlighter-rouge">:non-potable_water:</code></td> <td>:no_bicycles: <code class="language-plaintext highlighter-rouge">:no_bicycles:</code></td> </tr> <tr> <td>:no_pedestrians: <code class="language-plaintext highlighter-rouge">:no_pedestrians:</code></td> <td>:children_crossing: <code class="language-plaintext highlighter-rouge">:children_crossing:</code></td> <td>:no_entry: <code class="language-plaintext highlighter-rouge">:no_entry:</code></td> </tr> <tr> <td>:eight_spoked_asterisk: <code class="language-plaintext highlighter-rouge">:eight_spoked_asterisk:</code></td> <td>:eight_pointed_black_star: <code class="language-plaintext highlighter-rouge">:eight_pointed_black_star:</code></td> <td>:heart_decoration: <code class="language-plaintext highlighter-rouge">:heart_decoration:</code></td> </tr> <tr> <td>:vs: <code class="language-plaintext highlighter-rouge">:vs:</code></td> <td>:vibration_mode: <code class="language-plaintext highlighter-rouge">:vibration_mode:</code></td> <td>:mobile_phone_off: <code class="language-plaintext highlighter-rouge">:mobile_phone_off:</code></td> </tr> <tr> <td>:chart: <code class="language-plaintext highlighter-rouge">:chart:</code></td> <td>:currency_exchange: <code class="language-plaintext highlighter-rouge">:currency_exchange:</code></td> <td>:aries: <code class="language-plaintext highlighter-rouge">:aries:</code></td> </tr> <tr> <td>:taurus: <code class="language-plaintext highlighter-rouge">:taurus:</code></td> <td>:gemini: <code class="language-plaintext highlighter-rouge">:gemini:</code></td> <td>:cancer: <code class="language-plaintext highlighter-rouge">:cancer:</code></td> </tr> <tr> <td>:leo: <code class="language-plaintext highlighter-rouge">:leo:</code></td> <td>:virgo: <code class="language-plaintext highlighter-rouge">:virgo:</code></td> <td>:libra: <code class="language-plaintext highlighter-rouge">:libra:</code></td> </tr> <tr> <td>:scorpius: <code class="language-plaintext highlighter-rouge">:scorpius:</code></td> <td>:sagittarius: <code class="language-plaintext highlighter-rouge">:sagittarius:</code></td> <td>:capricorn: <code class="language-plaintext highlighter-rouge">:capricorn:</code></td> </tr> <tr> <td>:aquarius: <code class="language-plaintext highlighter-rouge">:aquarius:</code></td> <td>:pisces: <code class="language-plaintext highlighter-rouge">:pisces:</code></td> <td>:ophiuchus: <code class="language-plaintext highlighter-rouge">:ophiuchus:</code></td> </tr> <tr> <td>:six_pointed_star: <code class="language-plaintext highlighter-rouge">:six_pointed_star:</code></td> <td>:negative_squared_cross_mark: <code class="language-plaintext highlighter-rouge">:negative_squared_cross_mark:</code></td> <td>:a: <code class="language-plaintext highlighter-rouge">:a:</code></td> </tr> <tr> <td>:b: <code class="language-plaintext highlighter-rouge">:b:</code></td> <td>:ab: <code class="language-plaintext highlighter-rouge">:ab:</code></td> <td>:o2: <code class="language-plaintext highlighter-rouge">:o2:</code></td> </tr> <tr> <td>:diamond_shape_with_a_dot_inside: <code class="language-plaintext highlighter-rouge">:diamond_shape_with_a_dot_inside:</code></td> <td>:recycle: <code class="language-plaintext highlighter-rouge">:recycle:</code></td> <td>:end: <code class="language-plaintext highlighter-rouge">:end:</code></td> </tr> <tr> <td>:on: <code class="language-plaintext highlighter-rouge">:on:</code></td> <td>:soon: <code class="language-plaintext highlighter-rouge">:soon:</code></td> <td>:clock1: <code class="language-plaintext highlighter-rouge">:clock1:</code></td> </tr> <tr> <td>:clock130: <code class="language-plaintext highlighter-rouge">:clock130:</code></td> <td>:clock10: <code class="language-plaintext highlighter-rouge">:clock10:</code></td> <td>:clock1030: <code class="language-plaintext highlighter-rouge">:clock1030:</code></td> </tr> <tr> <td>:clock11: <code class="language-plaintext highlighter-rouge">:clock11:</code></td> <td>:clock1130: <code class="language-plaintext highlighter-rouge">:clock1130:</code></td> <td>:clock12: <code class="language-plaintext highlighter-rouge">:clock12:</code></td> </tr> <tr> <td>:clock1230: <code class="language-plaintext highlighter-rouge">:clock1230:</code></td> <td>:clock2: <code class="language-plaintext highlighter-rouge">:clock2:</code></td> <td>:clock230: <code class="language-plaintext highlighter-rouge">:clock230:</code></td> </tr> <tr> <td>:clock3: <code class="language-plaintext highlighter-rouge">:clock3:</code></td> <td>:clock330: <code class="language-plaintext highlighter-rouge">:clock330:</code></td> <td>:clock4: <code class="language-plaintext highlighter-rouge">:clock4:</code></td> </tr> <tr> <td>:clock430: <code class="language-plaintext highlighter-rouge">:clock430:</code></td> <td>:clock5: <code class="language-plaintext highlighter-rouge">:clock5:</code></td> <td>:clock530: <code class="language-plaintext highlighter-rouge">:clock530:</code></td> </tr> <tr> <td>:clock6: <code class="language-plaintext highlighter-rouge">:clock6:</code></td> <td>:clock630: <code class="language-plaintext highlighter-rouge">:clock630:</code></td> <td>:clock7: <code class="language-plaintext highlighter-rouge">:clock7:</code></td> </tr> <tr> <td>:clock730: <code class="language-plaintext highlighter-rouge">:clock730:</code></td> <td>:clock8: <code class="language-plaintext highlighter-rouge">:clock8:</code></td> <td>:clock830: <code class="language-plaintext highlighter-rouge">:clock830:</code></td> </tr> <tr> <td>:clock9: <code class="language-plaintext highlighter-rouge">:clock9:</code></td> <td>:clock930: <code class="language-plaintext highlighter-rouge">:clock930:</code></td> <td>:heavy_dollar_sign: <code class="language-plaintext highlighter-rouge">:heavy_dollar_sign:</code></td> </tr> <tr> <td>:copyright: <code class="language-plaintext highlighter-rouge">:copyright:</code></td> <td>:registered: <code class="language-plaintext highlighter-rouge">:registered:</code></td> <td>:tm: <code class="language-plaintext highlighter-rouge">:tm:</code></td> </tr> <tr> <td>:x: <code class="language-plaintext highlighter-rouge">:x:</code></td> <td>:heavy_exclamation_mark: <code class="language-plaintext highlighter-rouge">:heavy_exclamation_mark:</code></td> <td>:bangbang: <code class="language-plaintext highlighter-rouge">:bangbang:</code></td> </tr> <tr> <td>:interrobang: <code class="language-plaintext highlighter-rouge">:interrobang:</code></td> <td>:o: <code class="language-plaintext highlighter-rouge">:o:</code></td> <td>:heavy_multiplication_x: <code class="language-plaintext highlighter-rouge">:heavy_multiplication_x:</code></td> </tr> <tr> <td>:heavy_plus_sign: <code class="language-plaintext highlighter-rouge">:heavy_plus_sign:</code></td> <td>:heavy_minus_sign: <code class="language-plaintext highlighter-rouge">:heavy_minus_sign:</code></td> <td>:heavy_division_sign: <code class="language-plaintext highlighter-rouge">:heavy_division_sign:</code></td> </tr> <tr> <td>:white_flower: <code class="language-plaintext highlighter-rouge">:white_flower:</code></td> <td>:100: <code class="language-plaintext highlighter-rouge">:100:</code></td> <td>:heavy_check_mark: <code class="language-plaintext highlighter-rouge">:heavy_check_mark:</code></td> </tr> <tr> <td>:ballot_box_with_check: <code class="language-plaintext highlighter-rouge">:ballot_box_with_check:</code></td> <td>:radio_button: <code class="language-plaintext highlighter-rouge">:radio_button:</code></td> <td>:link: <code class="language-plaintext highlighter-rouge">:link:</code></td> </tr> <tr> <td>:curly_loop: <code class="language-plaintext highlighter-rouge">:curly_loop:</code></td> <td>:wavy_dash: <code class="language-plaintext highlighter-rouge">:wavy_dash:</code></td> <td>:part_alternation_mark: <code class="language-plaintext highlighter-rouge">:part_alternation_mark:</code></td> </tr> <tr> <td>:trident: <code class="language-plaintext highlighter-rouge">:trident:</code></td> <td>:black_square: <code class="language-plaintext highlighter-rouge">:black_square:</code></td> <td>:white_square: <code class="language-plaintext highlighter-rouge">:white_square:</code></td> </tr> <tr> <td>:white_check_mark: <code class="language-plaintext highlighter-rouge">:white_check_mark:</code></td> <td>:black_square_button: <code class="language-plaintext highlighter-rouge">:black_square_button:</code></td> <td>:white_square_button: <code class="language-plaintext highlighter-rouge">:white_square_button:</code></td> </tr> <tr> <td>:black_circle: <code class="language-plaintext highlighter-rouge">:black_circle:</code></td> <td>:white_circle: <code class="language-plaintext highlighter-rouge">:white_circle:</code></td> <td>:red_circle: <code class="language-plaintext highlighter-rouge">:red_circle:</code></td> </tr> <tr> <td>:large_blue_circle: <code class="language-plaintext highlighter-rouge">:large_blue_circle:</code></td> <td>:large_blue_diamond: <code class="language-plaintext highlighter-rouge">:large_blue_diamond:</code></td> <td>:large_orange_diamond: <code class="language-plaintext highlighter-rouge">:large_orange_diamond:</code></td> </tr> <tr> <td>:small_blue_diamond: <code class="language-plaintext highlighter-rouge">:small_blue_diamond:</code></td> <td>:small_orange_diamond: <code class="language-plaintext highlighter-rouge">:small_orange_diamond:</code></td> <td>:small_red_triangle: <code class="language-plaintext highlighter-rouge">:small_red_triangle:</code></td> </tr> <tr> <td>:small_red_triangle_down: <code class="language-plaintext highlighter-rouge">:small_red_triangle_down:</code></td> <td>¬†</td> <td>¬†</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="code"/><category term="markdown"/><category term="emoji"/><category term="code"/><summary type="html"><![CDATA[Markdown cheatsheet emoji]]></summary></entry><entry><title type="html">Markdown</title><link href="https://dswagon.github.io/code/2023/08/26/Markdown.html" rel="alternate" type="text/html" title="Markdown"/><published>2023-08-26T00:00:00+00:00</published><updated>2023-08-26T00:00:00+00:00</updated><id>https://dswagon.github.io/code/2023/08/26/Markdown</id><content type="html" xml:base="https://dswagon.github.io/code/2023/08/26/Markdown.html"><![CDATA[<p>This Markdown cheat sheet provides a quick overview of all the Markdown syntax elements. It can‚Äôt cover every edge case, so if you need more information about any of these elements, refer to the reference guides for <a href="https://www.markdownguide.org/basic-syntax">basic syntax</a> and <a href="https://www.markdownguide.org/extended-syntax">extended syntax</a>.</p> <h2 id="basic-syntax">Basic Syntax</h2> <p>These are the elements outlined in John Gruber‚Äôs original design document. All Markdown applications support these elements.</p> <hr/> <h2 id="heading">Heading</h2> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># H1</span>
<span class="sb">`# H1`</span>
<span class="gu">## H2</span>
<span class="sb">`## H2`</span>
<span class="gu">### H3</span>
<span class="sb">`### H3`</span>
</code></pre></div></div> <p><strong>bold text</strong> <code class="language-plaintext highlighter-rouge">**bold text**</code></p> <p><del>The world is flat.</del> <code class="language-plaintext highlighter-rouge">~~The world is flat.~~</code></p> <p><em>italicized text</em> <code class="language-plaintext highlighter-rouge">*italicized text*</code></p> <hr/> <h2 id="new-line">New line</h2> <p>&nbsp;</p> <p><code class="language-plaintext highlighter-rouge">&lt;p&gt;&amp;nbsp;&lt;/p&gt;</code> or <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code> and <code class="language-plaintext highlighter-rouge">&lt;br/&gt;</code></p> <hr/> <h2 id="custom-blockquote">Custom Blockquote</h2> <p><code class="language-plaintext highlighter-rouge">&gt; blockquote</code> or <code class="language-plaintext highlighter-rouge">&lt;blockquote&gt;&lt;/blockquote&gt;</code></p> <blockquote> <p>blockquote</p> </blockquote> <p>These custom styles can be used by adding the specific class to the blockquote, as follows:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; A tip can be used when you want to give advice</span>
<span class="gt">&gt; related to a certain content.</span>
{: .block-tip }
</code></pre></div></div> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>A tip can be used when you want to give advice related to a certain content.</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> <hr/> <h2 id="ordered-list">Ordered List</h2> <ol> <li>First item <code class="language-plaintext highlighter-rouge">1. First item</code></li> <li>Second item <code class="language-plaintext highlighter-rouge">2. Second item</code></li> <li>Third item <code class="language-plaintext highlighter-rouge">3. Third item</code></li> </ol> <hr/> <h2 id="unordered-list">Unordered List</h2> <ul> <li>First item <code class="language-plaintext highlighter-rouge">- First item</code></li> <li>Second item <code class="language-plaintext highlighter-rouge">- Second item</code></li> <li>Third item <code class="language-plaintext highlighter-rouge">- Third item</code></li> </ul> <hr/> <h2 id="code">Code</h2> <p><code class="language-plaintext highlighter-rouge">code</code> <code class="language-plaintext highlighter-rouge">code</code></p> <hr/> <h2 id="horizontal-rule">Horizontal Rule</h2> <hr/> <p><code class="language-plaintext highlighter-rouge">---</code> or <code class="language-plaintext highlighter-rouge">&lt;hr&gt;</code></p> <hr/> <h2 id="link">Link</h2> <p><a href="https://www.markdownguide.org">Markdown Guide</a> <code class="language-plaintext highlighter-rouge">[Markdown Guide](https://www.markdownguide.org)</code></p> <hr/> <h2 id="image">Image</h2> <p><img src="https://www.markdownguide.org/assets/images/tux.png" alt="alt text"/> <code class="language-plaintext highlighter-rouge">![alt text](https://www.markdownguide.org/assets/images/tux.png)</code></p> <hr/> <h2 id="table">Table</h2> <table> <thead> <tr> <th>Syntax</th> <th>Description</th> </tr> </thead> <tbody> <tr> <td>Header</td> <td>Title</td> </tr> <tr> <td>Paragraph</td> <td>Text</td> </tr> </tbody> </table> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Syntax | Description |
| ----------- | ----------- |
| Header | Title |
| Paragraph | Text |
</code></pre></div></div> <hr/> <h2 id="fenced-code-block">Fenced Code Block</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "firstName": "John",
  "lastName": "Smith",
  "age": 25
}
</code></pre></div></div> <hr/> <h2 id="footnote">Footnote</h2> <p>Here‚Äôs a sentence with a footnote. <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> <code class="language-plaintext highlighter-rouge">[^1]</code></p> <p><code class="language-plaintext highlighter-rouge">[^1]: This is the footnote.</code></p> <hr/> <h2 id="task-list">Task List</h2> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Write the press release</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Update the website</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Contact the media <code class="language-plaintext highlighter-rouge">- [x] Write the press release</code> <code class="language-plaintext highlighter-rouge">- [ ] Update the website</code> <code class="language-plaintext highlighter-rouge">- [ ] Contact the media</code></li> </ul> <hr/> <h2 id="emoji">Emoji</h2> <p>That is so funny! :joy: <code class="language-plaintext highlighter-rouge">:joy:</code></p> <p>(See also <a href="https://dswagon.github.io./sample-posts/2023/08/26/Markdown-emojy.html">Copying and Pasting Emoji</a>)</p> <hr/> <h2 id="table-of-contents">Table of contents</h2> <p>To add a table of contents to a post, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post. If you want to learn more about how to customize the table of contents, you can check the <a href="https://github.com/toshimaru/jekyll-toc">jekyll-toc</a> repository.</p> <hr/> <h2 id="table-of-contents-sidebar">Table of contents sidebar</h2> <p>To add a table of contents to a post as a sidebar, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post. If you wish to display the sidebar to the right, simply change <code class="language-plaintext highlighter-rouge">left</code> to <code class="language-plaintext highlighter-rouge">right</code>.</p> <p>If you want to learn more about how to customize the table of contents of your sidebar, you can check the <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a> documentation. Notice that you can even customize the text of the heading that will be displayed on the sidebar.</p> <hr/> <h2 id="images">Images</h2> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span>  <span class="s">a post with images</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2015-05-15 21:01:00</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">this is what included images could look like</span>
<span class="na">tags</span><span class="pi">:</span> <span class="s">formatting images</span>
<span class="na">categories</span><span class="pi">:</span> <span class="s">sample-posts</span>
<span class="na">thumbnail</span><span class="pi">:</span> <span class="s">assets/img/9.jpg</span>
<span class="nn">---</span>
</code></pre></div></div> <p>This is an example post with image galleries.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/9-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/9-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/9-1400.webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/7-1400.webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <p>Images can be made zoomable. Simply add <code class="language-plaintext highlighter-rouge">data-zoomable</code> to <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> tags that you want to make zoomable.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/8-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/8-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/8-1400.webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/10-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/10-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/10-1400.webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The rest of the images in this post are all zoomable, arranged into different mini-galleries.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/11-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/11-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/11-1400.webp"/> <img src="/assets/img/11.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/12-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/12-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/12-1400.webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/7-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/7-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/7-1400.webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <hr/> <h2 id="audios">Audios</h2> <p>This is an example post with audios. It supports local audio files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <hr/> <h2 id="videos">Videos</h2> <p>This is an example post with videos. It supports local video files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <p>It does also support embedding videos from different sources. Here are some examples:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div> <hr/> <h2 id="a-post-with-redirecting">A post with redirecting</h2> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">a post with redirect</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2022-02-01 17:39:00</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">you can also redirect to assets like pdf</span>
<span class="na">redirect</span><span class="pi">:</span> <span class="s">/assets/pdf/example_pdf.pdf</span>

<span class="nn">---</span>
</code></pre></div></div> <p>Redirecting to another page.</p> <hr/> <h2 id="twitter">Twitter</h2> <p>Tweet An example of displaying a tweet:</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>Timeline An example of pulling from a timeline:</p> <div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <p>Additional Details For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p> <hr/> <h2 id="diagrams">Diagrams</h2> <p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p> <p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the fist time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p> <p><strong>Mermaid</strong> Install mermaid using <code class="language-plaintext highlighter-rouge">node.js</code> package manager <code class="language-plaintext highlighter-rouge">npm</code> by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> mermaid.cli
</code></pre></div></div> <p>The diagram below was generated by the following code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1693404280289" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1693404280289 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1693404280289 .node circle,#mermaid-1693404280289 .node ellipse,#mermaid-1693404280289 .node polygon,#mermaid-1693404280289 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1693404280289 .node.clickable{cursor:pointer}#mermaid-1693404280289 .arrowheadPath{fill:#333}#mermaid-1693404280289 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1693404280289 .edgeLabel{background-color:#e8e8e8}#mermaid-1693404280289 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1693404280289 .cluster text{fill:#333}#mermaid-1693404280289 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1693404280289 .actor{stroke:#ccf;fill:#ececff}#mermaid-1693404280289 text.actor{fill:#000;stroke:none}#mermaid-1693404280289 .actor-line{stroke:grey}#mermaid-1693404280289 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1693404280289 .messageLine0,#mermaid-1693404280289 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1693404280289 #arrowhead{fill:#333}#mermaid-1693404280289 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1693404280289 .messageText{fill:#333;stroke:none}#mermaid-1693404280289 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1693404280289 .labelText,#mermaid-1693404280289 .loopText{fill:#000;stroke:none}#mermaid-1693404280289 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1693404280289 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1693404280289 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1693404280289 .section{stroke:none;opacity:.2}#mermaid-1693404280289 .section0{fill:rgba(102,102,255,.49)}#mermaid-1693404280289 .section2{fill:#fff400}#mermaid-1693404280289 .section1,#mermaid-1693404280289 .section3{fill:#fff;opacity:.2}#mermaid-1693404280289 .sectionTitle0,#mermaid-1693404280289 .sectionTitle1,#mermaid-1693404280289 .sectionTitle2,#mermaid-1693404280289 .sectionTitle3{fill:#333}#mermaid-1693404280289 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1693404280289 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1693404280289 .grid path{stroke-width:0}#mermaid-1693404280289 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1693404280289 .task{stroke-width:2}#mermaid-1693404280289 .taskText{text-anchor:middle;font-size:11px}#mermaid-1693404280289 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1693404280289 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1693404280289 .taskText0,#mermaid-1693404280289 .taskText1,#mermaid-1693404280289 .taskText2,#mermaid-1693404280289 .taskText3{fill:#fff}#mermaid-1693404280289 .task0,#mermaid-1693404280289 .task1,#mermaid-1693404280289 .task2,#mermaid-1693404280289 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1693404280289 .taskTextOutside0,#mermaid-1693404280289 .taskTextOutside1,#mermaid-1693404280289 .taskTextOutside2,#mermaid-1693404280289 .taskTextOutside3{fill:#000}#mermaid-1693404280289 .active0,#mermaid-1693404280289 .active1,#mermaid-1693404280289 .active2,#mermaid-1693404280289 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1693404280289 .activeText0,#mermaid-1693404280289 .activeText1,#mermaid-1693404280289 .activeText2,#mermaid-1693404280289 .activeText3{fill:#000!important}#mermaid-1693404280289 .done0,#mermaid-1693404280289 .done1,#mermaid-1693404280289 .done2,#mermaid-1693404280289 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1693404280289 .doneText0,#mermaid-1693404280289 .doneText1,#mermaid-1693404280289 .doneText2,#mermaid-1693404280289 .doneText3{fill:#000!important}#mermaid-1693404280289 .crit0,#mermaid-1693404280289 .crit1,#mermaid-1693404280289 .crit2,#mermaid-1693404280289 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1693404280289 .activeCrit0,#mermaid-1693404280289 .activeCrit1,#mermaid-1693404280289 .activeCrit2,#mermaid-1693404280289 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1693404280289 .doneCrit0,#mermaid-1693404280289 .doneCrit1,#mermaid-1693404280289 .doneCrit2,#mermaid-1693404280289 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1693404280289 .activeCritText0,#mermaid-1693404280289 .activeCritText1,#mermaid-1693404280289 .activeCritText2,#mermaid-1693404280289 .activeCritText3,#mermaid-1693404280289 .doneCritText0,#mermaid-1693404280289 .doneCritText1,#mermaid-1693404280289 .doneCritText2,#mermaid-1693404280289 .doneCritText3{fill:#000!important}#mermaid-1693404280289 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1693404280289 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1693404280289 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1693404280289 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1693404280289 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1693404280289 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1693404280289 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1693404280289 #compositionEnd,#mermaid-1693404280289 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1693404280289 #aggregationEnd,#mermaid-1693404280289 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1693404280289 #dependencyEnd,#mermaid-1693404280289 #dependencyStart,#mermaid-1693404280289 #extensionEnd,#mermaid-1693404280289 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1693404280289 .branch-label,#mermaid-1693404280289 .commit-id,#mermaid-1693404280289 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1693404280289{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div> <hr/> <h2 id="math">Math</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\] <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <h2 id="code-1">Code</h2> <p>This example is in C++. All you have to do is wrap your code in markdown code tags:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For displaying code in a list item, you have to be aware of the indentation, as stated in this <a href="https://stackoverflow.com/questions/34987908/embed-a-code-block-in-a-list-item-with-proper-indentation-in-kramdown/38090598#38090598">Stackoverflow answer</a>. You must indent your code by <strong>(3 * bullet_indent_level)</strong> spaces. This is because kramdown (the markdown engine used by Jekyll) indentation for the code block in lists is determined by the column number of the first non-space character after the list item marker. For example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">1.</span> We can put fenced code blocks inside nested bullets, too.
<span class="p">   1.</span> Like this:
      <span class="p">```</span><span class="nl">c
</span>      <span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
      <span class="p">```</span>
<span class="p">
   2.</span> The key is to indent your fenced block in the same line as the first character of the line.
</code></pre></div></div> <p>Which displays:</p> <ol> <li>We can put fenced code blocks inside nested bullets, too. <ol> <li>Like this: <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"Hello, World!"</span><span class="p">);</span>
</code></pre></div> </div> </li> <li>The key is to indent your fenced block in the same line as the first character of the line.</li> </ol> </li> </ol> <p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p> <p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <hr/> <h2 id="citations-and-quoting">Citations and quoting</h2> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">distill</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">a distill-style blog post</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">an example of a distill-style blog post and main elements</span>
<span class="na">tags</span><span class="pi">:</span> <span class="s">distill formatting</span>
<span class="na">giscus_comments</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2021-05-22</span>
<span class="na">featured</span><span class="pi">:</span> <span class="kc">true</span>
<span class="nn">---</span>
</code></pre></div></div> <p>authors:</p> <ul> <li>name: Albert Einstein url: ‚Äúhttps://en.wikipedia.org/wiki/Albert_Einstein‚Äù affiliations: name: IAS, Princeton</li> <li>name: Boris Podolsky url: ‚Äúhttps://en.wikipedia.org/wiki/Boris_Podolsky‚Äù affiliations: name: IAS, Princeton</li> <li>name: Nathan Rosen url: ‚Äúhttps://en.wikipedia.org/wiki/Nathan_Rosen‚Äù affiliations: name: IAS, Princeton</li> </ul> <p>bibliography: 2018-12-22-distill.bib</p> <p>Optionally, you can add a table of contents to your post. NOTES:</p> <ul> <li>make sure that TOC names match the actual section names for hyperlinks within the post to work correctly.</li> <li>we may want to automate TOC generation in the future using jekyll-toc plugin (https://github.com/toshimaru/jekyll-toc). toc:</li> <li>name: Equations if a section has subsections, you can add them as follows: subsections: <ul> <li>name: Example Child Subsection 1</li> <li>name: Example Child Subsection 2</li> </ul> </li> <li>name: Citations</li> <li>name: Footnotes</li> <li>name: Code Blocks</li> <li>name: Interactive Plots</li> <li>name: Layouts</li> <li>name: Other Typography?</li> </ul> <p>Below is an example of injecting additional post-specific styles. If you use this post as a template, delete this _styles block. _styles: &gt; .fake-img { background: #bbb; border: 1px solid rgba(0, 0, 0, 0.1); box-shadow: 0 0px 4px rgba(0, 0, 0, 0.1); margin-bottom: 12px; } .fake-img p { font-family: monospace; color: white; text-align: left; margin: 12px 0; text-align: center; font-size: 16px; }</p> <hr/> <h3 id="equations">Equations</h3> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <hr/> <h3 id="citations">Citations</h3> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well‚Äâ‚Äî‚Äâthe authors are human and it‚Äôs nice for them to have the community associate them with their work.</p> <hr/> <h3 id="footnotes">Footnotes</h3> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h3 id="code-blocks">Code Blocks</h3> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h3 id="interactive-plots">Interactive Plots</h3> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
  <span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
  <span class="n">df</span><span class="p">,</span>
  <span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
  <span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
  <span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
  <span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
  <span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h3 id="details-boxes">Details boxes</h3> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h3 id="layouts">Layouts</h3> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you‚Äôll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h3 id="other-typography">Other Typography?</h3> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ‚ãÖ‚ãÖ* Unordered sub-list.</li> <li>Actual numbers don‚Äôt matter, just that it‚Äôs a number ‚ãÖ‚ãÖ1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>‚ãÖ‚ãÖ‚ãÖYou can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we‚Äôll use three here to also align the raw Markdown).</p> <p>‚ãÖ‚ãÖ‚ãÖTo have a line break without a paragraph, you will need to use two trailing spaces.‚ãÖ‚ãÖ ‚ãÖ‚ãÖ‚ãÖNote that this line is separate, but within the same paragraph.‚ãÖ‚ãÖ ‚ãÖ‚ãÖ‚ãÖ(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I‚Äôm an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I‚Äôm an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I‚Äôm a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I‚Äôm a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here‚Äôs our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don‚Äôt need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let‚Äôs keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here‚Äôs a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but‚Ä¶ This line is only separated by a single newline, so it‚Äôs a separate line in the <em>same paragraph</em>.</p> <hr/> <h2 id="github-metadata">Github metadata</h2> <hr/> <p>layout: post title: a post with github metadata date: 2020-09-28 21:01:00 description: a quick run down on accessing github metadata. tags: metadata categories: sample-posts external-services ‚Äî</p> <p>A sample blog page that demonstrates the accessing of github meta data.</p> <p><strong>What does Github-MetaData do?</strong></p> <ul> <li>Propagates the site.github namespace with repository metadata</li> <li>Setting site variables : <ul> <li>site.title</li> <li>site.description</li> <li>site.url</li> <li>site.baseurl</li> </ul> </li> <li>Accessing the metadata - duh.</li> <li>Generating edittable links.</li> </ul> <p><strong>Additional Reading</strong></p> <ul> <li>If you‚Äôre recieving incorrect/missing data, you may need to perform a Github API<a href="https://github.com/jekyll/github-metadata/blob/master/docs/authentication.md"> authentication</a>.</li> <li>Go through this <a href="https://jekyll.github.io/github-metadata/">README</a> for more details on the topic.</li> <li><a href="https://github.com/jekyll/github-metadata/blob/master/docs/site.github.md">This page</a> highlights all the feilds you can access with github-metadata. <br/></li> </ul> <p><strong>Example MetaData</strong></p> <ul> <li>Host Name :</li> <li>URL :</li> <li>BaseURL :</li> <li>Archived :</li> <li>Contributors :</li> </ul> <hr/> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:1" role="doc-endnote"> <p>This is the footnote.¬†<a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="code"/><category term="markdown"/><category term="code"/><summary type="html"><![CDATA[Markdown cheatsheet]]></summary></entry><entry><title type="html">Terminal</title><link href="https://dswagon.github.io/code/2023/08/26/Terminal.html" rel="alternate" type="text/html" title="Terminal"/><published>2023-08-26T00:00:00+00:00</published><updated>2023-08-26T00:00:00+00:00</updated><id>https://dswagon.github.io/code/2023/08/26/Terminal</id><content type="html" xml:base="https://dswagon.github.io/code/2023/08/26/Terminal.html"><![CDATA[<h2 id="directories--files">Directories &amp; Files</h2> <p><br/></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">terminal
</span><span class="gp">#</span><span class="w"> </span>Where am I? <span class="o">(</span>print working directory<span class="o">)</span> <span class="nb">pwd</span>
<span class="gp">#</span><span class="w"> </span>Where can I go? <span class="nb">ls</span>, ll
<span class="gp">#</span><span class="w"> </span>Move directory <span class="nb">cd </span>path/to/directory
<span class="gp">#</span><span class="w"> </span>Move back? <span class="nb">cd</span> ..
<span class="gp">#</span><span class="w"> </span>Return to home folder <span class="o">(</span>~<span class="o">)</span> <span class="nb">cd</span>
<span class="p">```</span>
</code></pre></div></div> <p>&nbsp;</p> <h2 id="create-a-new-directory">Create a new directory</h2> <p><br/></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">terminal
</span><span class="go">mkdir new_directory_name
mkdir first_directory_name second_directory_name
</span><span class="gp">#</span><span class="w"> </span>Delete a directory <span class="o">(</span>‚ö†Ô∏è careful, there<span class="s1">'s no going back!)
</span><span class="go">rm -r directory_name
rm -rf directory_name
</span><span class="gp">#</span><span class="w"> </span>Create a new file <span class="nb">touch </span>file_name.rb
<span class="gp">#</span><span class="w"> </span>Move a file somewhere <span class="nb">mv </span>file_name.rb path/to/new/directory
<span class="gp">#</span><span class="w"> </span>Rename a file <span class="nb">mv  </span>file_name.rb new_file_name.rb
<span class="gp">#</span><span class="w"> </span>Delete a file <span class="o">(</span>‚ö†Ô∏è careful, there<span class="s1">'s no going back!) rm file_name.rb
</span><span class="gp">#</span><span class="w"> </span><span class="s1">Open current directory in VSCODE stt, code
</span><span class="gp">#</span><span class="w"> </span><span class="s1">Open current directory in finder (OS X only) open .</span>
<span class="p">```</span>
</code></pre></div></div> <p>&nbsp;</p> <h2 id="useful-commands">Useful commands</h2> <p><br/></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">terminal
</span><span class="gp">#</span><span class="w"> </span>Clear the <span class="nb">command </span>line window clear
<span class="gp">#</span><span class="w"> </span>List running processes ps aux
<span class="gp">#</span><span class="w"> </span>List running processes of a certain application ps aux | <span class="nb">grep</span> <span class="s1">'ruby'</span>
<span class="gp">#</span><span class="w"> </span>Kill a process with PID <span class="nb">kill</span> &lt;pid&gt;, <span class="nb">kill </span>2209
<span class="gp">#</span><span class="w"> </span>Find PID of process used by a specific port: lsof <span class="nt">-i</span> :&lt;port&gt; lsof <span class="nt">-i</span> :3000
<span class="gp">#</span><span class="w"> </span>Check <span class="nb">local </span>storage usage <span class="nb">df</span> <span class="nt">-hP</span>
<span class="gp">#</span><span class="w"> </span>Check file sizes of files <span class="k">in </span>current directory <span class="nb">du</span> <span class="nt">-shc</span> <span class="k">*</span>
<span class="gp">#</span><span class="w"> </span>Check latest system errors dmesg
<span class="p">```</span>
</code></pre></div></div> <p>&nbsp;</p> <h2 id="keyboard-shortcuts">Keyboard Shortcuts</h2> <p><br/></p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">terminal
</span><span class="gp">clear window (keeping history)             #</span><span class="w"> </span>ctrl + l
<span class="gp">clear window (losing history)              #</span><span class="w"> </span>cmd + k
<span class="gp">go to the next word                        #</span><span class="w"> </span>alt + ‚Üí
<span class="gp">go to the previous word                    #</span><span class="w"> </span>alt + ‚Üê
<span class="gp">go to the beginning of line                #</span><span class="w"> </span>ctrl + a
<span class="gp">go to the end of line                      #</span><span class="w"> </span>ctrl + e
<span class="gp">erase the whole line                       #</span><span class="w"> </span>ctrl + u
<span class="p">```</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code"/><category term="terminal"/><category term="code"/><summary type="html"><![CDATA[Terminal commands]]></summary></entry></feed>